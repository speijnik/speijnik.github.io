<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (proof of concept)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>git smart protocol via WebSockets - proof of concept</title><link>http://blog.sp.or.at/posts/201206git-smart-protocol-via-websockets-proof.html</link><description>&lt;p&gt;Yesterday an idea came to my mind: let's try running git's smart transport protocol via a WebSocket. In a few hours of work I came up with a solution which works.&lt;br&gt;&lt;br&gt;But why would one want to do that? Basically the only options for running git's smart protocol you have right now is either using git's own protocol or tunneling it via ssh. The first option leaves you without any ways of authentication - so it's only usable for read-only access to public repositories. The second option involves using an ssh server, which then allows read-write access and authentication, but is quite some work to set up.&lt;br&gt;As I am working on a university assignment which involves using WebSockets right now it occurred to me that there is no reason for not using WebSockets for this.&lt;br&gt;&lt;br&gt;The main idea is providing a tunnel, just like the ssh transport does, but this time via a WebSocket. The logic is the same and there is no modification to git itself required.&lt;br&gt;For now I have only implemented a proof of concept which allows you to update your repository from a remote system, but the approach should work perfectly well for pushing your changes to a remote repository too.&lt;br&gt;&lt;br&gt;Let's have a look at how this works.&lt;br&gt;On the local system &lt;i&gt;git-fetch-pack&lt;/i&gt; is invoked, which talks to a &lt;i&gt;git-upload-pack&lt;/i&gt; process on the remote end. The code I wrote provides a script which acts like an ssh client, but creates a WebSocket connection to the remote end, using Python and the &lt;a href="http://pypi.python.org/pypi/websocket-client/0.7.0"&gt;websocket-client&lt;/a&gt; Python package. On the other side of the tunnel a simple Python WSGI application, which uses &lt;a href="http://pypi.python.org/pypi/gevent-websocket/0.3.6"&gt;gevent-websocket&lt;/a&gt;, provides the server-side implementation.&lt;br&gt;Now when a WebSocket connection is established the server spawns a &lt;i&gt;git-upload-pack&lt;/i&gt; process and redirects its stdout to the WebSocket. Data which is received over the WebSocket is sent to the &lt;i&gt;git-upload-pack's &lt;/i&gt;stdin file descriptor.&lt;br&gt;On the client this logic is reversed, redirecting its stdout to the WebSocket and sending data received over the WebSocket to its stdin file descriptor.&lt;br&gt;&lt;br&gt;That's about it. Keep in mind this is a proof-of-concept, so there may be rough edges here and there and both stability and performance may be "sub-optimal".&lt;br&gt;I'd also like to point out that using WebSockets and HTTP as the underlying transport protocol gives one the opportunity to use standard HTTP(s) authentication mechanisms. This means that the WebSocket approach could be useful to git hosting sites, basically removing the need for running an ssh server.&lt;br&gt;&lt;br&gt;You can find the Python code over at &lt;a href="https://github.com/speijnik/gitws"&gt;https://github.com/speijnik/gitws&lt;/a&gt;. Have fun giving it a try.&lt;br&gt;&lt;br&gt;&lt;/p&gt;</description><category>http</category><category>gitws</category><category>websocket</category><category>git</category><category>proof of concept</category><category>python</category><guid>http://blog.sp.or.at/posts/201206git-smart-protocol-via-websockets-proof.html</guid><pubDate>Tue, 05 Jun 2012 05:08:00 GMT</pubDate></item></channel></rss>