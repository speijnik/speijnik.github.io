<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (Technology)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>ISC dhcpd and IP assignments from a pool to specific hosts only</title><link>http://blog.sp.or.at/posts/201101isc-dhcpd-and-ip-assignments-from-pool.html</link><description>&lt;p&gt;Assigning an IP address statically to a host with a given MAC address using ISC dhcpd is quite trivial, one host entry, a hardware ethernet entry and a fixed-address entry and you are up and running.&lt;br&gt;But what if you want to assign IP addresses from a pool to only a few hosts with specific MAC addresses?&lt;br&gt;&lt;br&gt;Before you ask yourself why someone might want to do that, have a look at my (very real) use-case.&lt;br&gt;I am currently working on setting up an installation server for my employer, &lt;a href="http://www.anexia.at/"&gt;ANEXIA Internetdienstleistungs GmbH&lt;/a&gt;. The server itself uses PXE, TFTP and FAI for installing systems. To be able to do PXE booting one has to set up an DHCP server to provide configuration details, like the TFTP Server Address and the boot filename.&lt;br&gt;&lt;br&gt;Now what one should consider is that this system is designed to provide automatic installations for internet-facing hosts, namely ones in public IP networks. Running a DHCP server in such a network is not a good idea. We neither want to dish out configurations to each and every hosts that asks for them, neither do not want to do a PXE boot each and every time one of our systems is restarted. Now the combination of FAI and pxelinux allows for default configurations which force local booting, but this still causes the (re-)boot time for those systems to increase and potentially also increases the load on the TFTP server. Also, let's not even consider thinking about whether this setup is "clean" or not. I personally believe that dishing out IP addresses in a public IP network is a bad thing(tm) and I guess a lot of people will be nodding when reading these lines.&lt;br&gt;&lt;br&gt;What I was asking myself is how to get something like that set up in a cleaner way, and guess what, I found a solution.&lt;br&gt;The basic idea behind this is only providing IP configuration via DHCP to a specific set of hosts (with a specific set of MAC addresses) and not providing any information to all other hosts. The specific set of hosts are those that we want to do an install run on. This is a no-brainer and I guess the right way to do that, but implementing this approach is not as straight-forward as I initially thought.&lt;br&gt;&lt;br&gt;Actually the implementation of that idea caused me a bit of a headache and cost me a few work-hours to get right, that's why I'd like to share the configuration details with you.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;Let's have a look at how to get such a setup using ISC dhcpd. We are using the fact that ISC dhcpd allows you to not only configure a subnet, but rather also pools inside subnets, which can have allow and deny rules. Such rules can be in the form of "allow/deny member of ", where classes (and subclasses, keep on reading for details) can be defined inside the configuration file as well.&lt;br&gt;&lt;br&gt;What we first did was creating a subnet with a pool declaration, as follows:&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;subnet 10.0.0.0 netmask 255.255.255.0 {  &lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    option routers &lt;span class="Apple-style-span" style="font-style: normal;"&gt;&lt;i&gt;10.0.0.254&lt;/i&gt;&lt;/span&gt;;&lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    option broadcast-address &lt;span class="Apple-style-span" style="font-style: normal;"&gt;&lt;i&gt;10.0.0.&lt;/i&gt;&lt;/span&gt;255;&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    filename "fai/pxelinux.0";&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    next-server &lt;span class="Apple-style-span" style="font-style: normal;"&gt;&lt;i&gt;10.0.0.254&lt;/i&gt;&lt;/span&gt;;&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    server-name "10.0.0.254";&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    pool { &lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;      allow members of "install"; &lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;      range 10.0.0.10 10.0.0.230; &lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;   }&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;}&lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;This one configures the subnet 10.0.0.0/24, with 10.0.0.254 being the network gateway, 10.0.0.254 being the TFTP server and "fai/pxelinux.0" being the TFTP filename. Additionally pool allows us to define a range of IP addresses we want to use, along with a line stating that only members of the "install" class should get a network configuration. If you do not have any other subnet defined in your config and a client that is not in this "install" class asks for an IP address you will see something like this in your syslog:  "&lt;i&gt;dhcpd: DHCPDISCOVER from 11:22:33:44:55:66 via eth1: network 10.0.0/24: no free leases&lt;/i&gt;". dhcpd will not even answer these requests and thus the client will not even know that there is a DHCP server running here. Exactly what we wanted.&lt;br&gt;&lt;br&gt;I wrote about this giving me a headache, but so far things have been pretty straight-forward. Getting this far did not take very long, believe me.&lt;br&gt;&lt;br&gt;Next thing we did was defining that "install" class as follows:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;i&gt;class "install" { match hardware; }&lt;/i&gt;&lt;/blockquote&gt;Again, not very hard to do. This tells dhcpd to look for subclasses of "install" with a matching hardware-address. So let's have a look at the subclass for, let's say the host with MAC address "11:22:33:44:55:66":&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;i&gt;subclass "install" &lt;b&gt;1:&lt;/b&gt;11:22:33:44:55:66;&lt;/i&gt;&lt;/blockquote&gt;I intentionally highlighted the leading "1:" there. This means nothing more or less than "ethernet". Without that leading "1:" you won't get anywhere. Matching will fail, simple as that. It took me a while to find  information about this in "&lt;i&gt;man 5 dhcp-eval&lt;/i&gt;". Quoting parts of the interesting section:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;The hardware operator returns a data string whose first  element  is&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;the  type of network interface indicated in packet being considered,&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;and whose subsequent elements are client’s link-layer address. [...] Hardware types include  ethernet  (1),  token-ring  (6), and fddi (8).&lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt; Now, with the combination of the subnet, pool, class and subclass directives we could get the setup we wanted: a DHCP server only providing IP configuration to a specific set of hosts and ignoring all other DHCP requests.&lt;br&gt;&lt;br&gt;If you have any comments about this setup or ideas on how to get something similar set-up using another approach feel free to leave a comment.&lt;br&gt;&lt;br&gt;Personal final note: accidentally typing 80 instead of 08 in a MAC address will cost you an additional two hours and will even have you re-compile ISC dhcpd with eval debugging turned on, believe me. :-)</description><category>Technology</category><category>dhcpd</category><category>sysadmin</category><category>Networking</category><category>isc dhcpd</category><guid>http://blog.sp.or.at/posts/201101isc-dhcpd-and-ip-assignments-from-pool.html</guid><pubDate>Sat, 01 Jan 2011 21:01:00 GMT</pubDate></item><item><title>ujail: use cases, FAQs, part 1 &amp; proof of concept, part 2</title><link>http://blog.sp.or.at/posts/200912ujail-use-cases-faqs-part-1-proof-of.html</link><description>&lt;p&gt;As I ran out of time whilst writing the "&lt;a href="http://techandsp.blogspot.com/2009/12/introducing-ujail-proof-of-concept.html"&gt;introducing ujail&lt;/a&gt;" post on monday I would like to further elaborate on the idea, giving you some examples of possible use cases and then having a look at FAQs regarding ujail. Additionally I have created a second proof of concept that should be a lot faster, see below for more details.&lt;br&gt;&lt;br&gt;&lt;b&gt;Use cases of ujail&lt;/b&gt; &lt;br&gt;&lt;br&gt;Monday's post was rather technical, so let's have a look at possible use cases today.&lt;br&gt;&lt;br&gt;The main reason for both having the idea of ujail and starting working on it is my web server. I am running quite a few (S)CGI scripts there and, even though running them as different users, on a per-vhost basis, I have the impression of the whole thing being a bit insecure.&lt;br&gt;&lt;br&gt;Okay, PHP does provide its famous &lt;i&gt;open_basedir&lt;/i&gt; feature, but I am also running some Python applications which I simply cannot restrict easily. My first ideas involved adding something similar to open_basedir to Python, followed by the idea of replacing some C library functions, like fopen and friends on startup time.&lt;br&gt;&lt;br&gt;Whilst the adding open_basedir to Python would have involved changing a lot of Python's internals I soon discarded the library patching idea as those could be worked around by injected code directly invoking syscalls. It didn't take long for me to notice that I have to dig deeper. The idea of ujail was born and after coming up with the proof of concept this seems to be a viable solution.&lt;br&gt;&lt;br&gt;Now ujail is not only about protecting a web server from its web applications, but could do a lot more, for example:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Creating a sandbox for untrusted code (socket&amp;amp;file i/o emulation)&lt;br&gt;&lt;/li&gt;&lt;li&gt;Implementing some sort of personal firewall (socket-call only emulation)&lt;/li&gt;&lt;li&gt;Testing applications that perform low-level system operations (read: package managers and friends, filesystem emulation)&lt;/li&gt;&lt;/ul&gt; I am sure you can come up with even more use-cases. What should be noted is that emulating a system call does not mean that one necessarily needs to emulate the whole filesystem. What can be done, for example, is patching through access to common files (libraries, executables, etc.) whilst maintaining a virtual filesystem for data that will eventually be modified. A copy-on-write approach is possible too, for example. There are multiple methods with which the multiple filesystem could be implemented, the most common would probably be using a state directory.&lt;br&gt;&lt;br&gt;&lt;b&gt;FAQs&lt;/b&gt;&lt;br&gt;&lt;br&gt;There have been some questions about ujail in comments to my first post which I would like to answer. Also, I have been thinking about things that are different about ujail compared to other virtualization techniques. Feel free to add additional questions either in a comment or drop me an email: debian at sp dot or dot at.&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;Could you change the license of ujail to ... ?&lt;br&gt;&lt;br&gt;Not likely to happen. The proof of concept's license is GPLv3 and the actual code's license will be too. However, ujail is a userspace application that does not need any modifications to the kernel so there should be no problems with porting ujail from GNU/Linux to any other system.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Does ujail work on operating systems other than GNU/Linux?&lt;br&gt;&lt;br&gt;Not yet. If it's technically possible to implement the technique on other operating systems I would be happy to accept patches.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Do I need to patch my kernel for ujail to work?&lt;br&gt;&lt;br&gt;No, ujail is running in userspace. The only thing it needs is Linux with support for PTRACE_SYSEMU.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;How is this approach different from using LD_PRELOAD?&lt;br&gt;&lt;br&gt;With LD_PRELOAD one can replace library functions, but malicious code could still directly invoke syscalls, working around this protection completely. Also, statically linked binaries cannot be restricted with LD_PRELOAD.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;How is this approach different from user-mode-linux?&lt;br&gt;&lt;br&gt;User-mode-linux (UML) works by emulating a full kernel in userspace and allows you to virtualize a whole Linux instance (including a new init process, etc). ujail is about providing a way of restricting a single process (and its childs) inside a running system in terms of access to syscalls and the partial emulation of those.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;How is this approach different from linux-vserver?&lt;br&gt;&lt;br&gt;Linux-vserver is a kernel patch and runs in kernel space, as opposed to ujail, which works in userspace.&lt;br&gt;Also, linux-vserver works similarly to user-mode-linux, providing a fully virtualized Linux instance.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Does the account running ujail need any special privileges?&lt;br&gt;&lt;br&gt;No, the only restrictions that apply are those of ptrace.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Where is the code?&lt;br&gt;&lt;br&gt;Right now ujail is in a planning phase, and only the proof of concept code has been written and published. The actual ujail code is yet to be written and the code will be hosted on &lt;a href="http://launchpad.net/ujail"&gt;launchpad.net&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Proof of concept, part 2&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;An anonymous person (who were you stranger?) added a comment to my first post, suggesting "&lt;i&gt;Also, why patch the process rather than just modifying its state and trapping into the kernel?&lt;/i&gt;". I have had a look at this approach earlier, but it didn't work out. However, I decided to give it yet another try and created a &lt;a href="http://bazaar.launchpad.net/%7Espeijnik/ujail/proof-of-concept/revision/3"&gt;second proof of concept&lt;/a&gt;. That code does not require patching any code, but only modifies the instruction pointer (eip) and the first register (eax). This should be a lot faster than patching the code.&lt;br&gt;&lt;br&gt;Technically the new main loop works by calling PTRACE_SYSEMU and waiting for a notification. It then saves the instruction pointer and switches to PTRACE_SYSCALL. As before it waits for the emulated syscall to exit and at this point sets eax from orig_eax and decreases the value of the instruction pointer by the size of the "&lt;i&gt;int $0x80&lt;/i&gt;" instruction. Another call to PTRACE_SYSCALL resumes the process. The next event is the process actually entering the real syscall and yet another one leaving the syscall again. These are resumed by PTRACE_SYSCALL and PTRACE_SYSEMU respectively. So, comparing this with the first approach we are only modifying two registers now, instead of writing to the TEXT area of the running process.&lt;br&gt;&lt;br&gt;Thanks should go to the anonymous commenter for making me give this approach another try.&lt;br&gt;&lt;br&gt;&lt;b&gt;Questions? Criticism? More ideas? Want to contribute?&lt;/b&gt;&lt;br&gt;&lt;br&gt;Coming to an end I would yet again like to let you know that I am  open for questions, criticism, more ideas and contributions in general. So if you are interested in this topic come join the discussion by either dropping me an email, writing a comment to this post or replying to this post on your own blog.</description><category>Technology</category><category>ujail</category><category>GNU/Linux</category><category>free software</category><guid>http://blog.sp.or.at/posts/200912ujail-use-cases-faqs-part-1-proof-of.html</guid><pubDate>Wed, 09 Dec 2009 09:16:00 GMT</pubDate></item><item><title>Introducing ujail &amp; proof of concept</title><link>http://blog.sp.or.at/posts/200912introducing-ujail-proof-of-concept.html</link><description>&lt;p&gt;Lately I have been thinking about methods to provide a stripped down, secured environment for running untrusted code on GNU/Linux. With this post I would like to present you with the first results of my research.&lt;br&gt;&lt;br&gt;&lt;b&gt;ujail - brief introduction&lt;/b&gt;&lt;br&gt;&lt;br&gt;I have chosen &lt;a href="http://launchpad.net/ujail"&gt;ujail&lt;/a&gt; as the name for the technique I am proposing. ujail stands for micro jail in userspace and, in itself, describes the concept briefly. The main idea is to have a userspace process monitor system calls of one of its childs and emulate some calls, if needed. This is done using ptrace and namely both PTRACE_SYSEMU and PTRACE_SYSCALL.&lt;br&gt;The ujail process should not be able to monitor syscalls, like strace does, but also intercept and emulate them.&lt;br&gt;&lt;br&gt;This sounds a lot like user mode linux (uml), but the method is different. Whilst uml comes with a complete kernel, emulates all system calls and this way provides a virtualized system, ujail is intended to only emulate some systemcalls, without emulating the kernel.&lt;br&gt;&lt;br&gt;&lt;b&gt;Revisiting PTRACE_SYSCALL &amp;amp; PTRACE_SYSEMU&lt;/b&gt;&lt;br&gt;&lt;br&gt;To better explain how the ujail technique works I would like to have a quick look at PTRACE_SYSCALL and PTRACE_SYSEMU again.&lt;br&gt;&lt;br&gt;PTRACE_SYSCALL allows a userspace process to be notified whenever a traced process enters or leaves a system call. This means that two notifications are normally sent: one before system call entry and one afterwards. Even though one is able to change the parameters of system calls this method does not allow system calls to be fully emulated (think virtual filesystem here).&lt;br&gt;&lt;br&gt;PTRACE_SYSEMU on the other hand provides one notification on syscall entry and expects the receiver of the notification to emulate the syscall. This method alone sounds great, but this also means that memory allocation needs to be emulated too, which is quite complex in userspace.&lt;br&gt;&lt;br&gt;&lt;b&gt;A hybrid of PTRACE_SYSCALL &amp;amp; PTRACE_SYSEMU&lt;/b&gt;&lt;br&gt;&lt;br&gt;Now on to the concept behind ujail. The method I am describing works by calling PTRACE_SYSEMU for a specific process and this way taking over emulation of all system calls. However, some system calls are complex to emulate in userspace, and so a hybrid of both PTRACE_SYSEMU and PTRACE_SYSCALL is needed. In short this works by checking whether the syscall needs to be emulated when the PTRACE_SYSEMU event is received.&lt;br&gt;Now one way is emulating the syscall, filling the processes' registers and resuming execution of the process. This is simple and straight-forward.&lt;br&gt;&lt;br&gt;The second way is forwarding the system call to the kernel. The problem here is that calling the syscall in the monitoring process will make the new resources available to that very process, and not the process to be jailed. This is where the hybrid method kicks in.&lt;br&gt;&lt;br&gt;The proof of concept code creates a backup of the next instruction to be executed along with a copy of the instruction pointer at this point and patches it with the opcodes for "int $0x80", causing the syscall to be made again. After that it resumes execution with PTRACE_SYSCALL and waits again. The first event to be received now is the program leaving the emulated system call, which can be ignored. Resuming yet again will give use two PTRACE_SYSCALL events, one for syscall entry and one for syscall exit.&lt;br&gt;&lt;br&gt;The first event is not really interesting, but at the second event the opcode backup is restored and the eip set from the saved value. Now the kernel has handled the syscall and the result is ready for the child process. A final call of PTRACE_SYSEMU resumes execution of the child and waits for the next syscall.&lt;br&gt;&lt;br&gt;&lt;b&gt;Proof of concept&lt;/b&gt;&lt;br&gt;&lt;br&gt;The proof of concept code can be downloaded from its &lt;a href="https://code.launchpad.net/%7Espeijnik/ujail/proof-of-concept"&gt;bazaar branch&lt;/a&gt; at launchpad.net. It is intended to be used on i386 systems only and works with simple programs, but is known not to work with anything using fork, vfork and most likely will not work for binaries using threading.&lt;br&gt;&lt;br&gt;Finally, I would like to thank &lt;a href="http://www.linuxjournal.com/user/800841" title="View user profile."&gt;Pradeep Padala&lt;/a&gt; for his "Playing with ptrace" articles &lt;a href="http://www.linuxjournal.com/article/6100"&gt;[0]&lt;/a&gt;&lt;a href="http://www.linuxjournal.com/article/6210"&gt;[1]&lt;/a&gt;, which were fun to read and worked as a great introduction of ptrace for me. &lt;br&gt;&lt;br&gt;Now there is only one thing left to say: if you are interested in this method, see loopholes or problems or want to contribute, please go ahead and contact me:&lt;br&gt;&lt;br&gt;debian at sp dot or dot at&lt;/p&gt;</description><category>Technology</category><category>ujail</category><category>GNU/Linux</category><category>free software</category><guid>http://blog.sp.or.at/posts/200912introducing-ujail-proof-of-concept.html</guid><pubDate>Mon, 07 Dec 2009 15:49:00 GMT</pubDate></item><item><title>How to copy partitions under GNU/Linux the easy way</title><link>http://blog.sp.or.at/posts/200912how-to-copy-partitions-under-gnulinux.html</link><description>&lt;p&gt;After getting a new disk for my Popcorn Hour A-110 device I had to copy all partitions from the old disk onto the new one so I do not have to reinstall some applications and reconfigure everything.&lt;br&gt;&lt;br&gt;After searching the web and trying to find a free alternative to Norton Ghost and Acronis True Image, preferably not using a boot disk on its own (I did not want to backup my workstation after all, just a simple partition to partition copy between two SATA disks) I gave up and decided to do the copying manually.&lt;br&gt;&lt;br&gt;So I fired up gparted to do the partitioning, did a right click and... I noticed that gparted supports copy/paste. Being curious about what this could potentially do I gave it a try. I marked partition one on the old disk, did a copy, went to the new disk and clicked on paste - and guess what, gparted did what I was looking for.&lt;br&gt;&lt;br&gt;Putting a long story short: you can copy whole partitions using gparted's copy/paste mechanism and even resize them whilst doing so. I am somehow ashamed I did not notice this feature earlier, having been a gparted user for a few years now and I can imagine I am not the only one who missed that.&lt;/p&gt;</description><category>Technology</category><category>gparted</category><category>free software</category><guid>http://blog.sp.or.at/posts/200912how-to-copy-partitions-under-gnulinux.html</guid><pubDate>Tue, 01 Dec 2009 16:22:00 GMT</pubDate></item><item><title>kvm, qemu and the magic of ubuntu-vm-builder</title><link>http://blog.sp.or.at/posts/200911kvm-qemu-and-magic-of-ubuntu-vm-builder.html</link><description>&lt;p&gt;As I &lt;a href="http://techandsp.blogspot.com/2009/11/my-android-repositories.html"&gt;noted&lt;/a&gt; two days ago I was unable to build Android on Ubuntu 9.10 x86-64 and thus needed to set up a virtual machine.&lt;br&gt;&lt;br&gt;At first I went for my preferred virtualization solution, &lt;a href="http://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; and had to notice that even though I assigned all 4 processor cores of my workstation (along with 2GiB of memory) to the virtual machine building was painfully slow. I immediately ditched the idea of using  VirtualBox again and decided to give something new to me a try: the combination of &lt;a href="http://www.linux-kvm.org/page/Main_Page"&gt;kvm&lt;/a&gt; and &lt;a href="http://www.qemu.org/"&gt;qemu&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Having Intel VT-x support built into my workstation's processor I thought that this combination should give better performance, and I wasn't disappointed. To be honest, I am astonished on how fast the beast is now. Disk speed still seems to be not as fast as running things natively, but there must be a downside somewhere. :-)&lt;br&gt;&lt;br&gt;After a bit of googling I also found that &lt;a href="https://launchpad.net/vmbuilder"&gt;ubuntu-vm-builder&lt;/a&gt; exists, which simplifies virtual system creation tremendously.&lt;br&gt;&lt;br&gt;My Android working tree is being synchronized right now, which means that I should be able to start building in a few minutes time. I hope the virtual machine stays as fast as it is right now during the build and I hope everything goes well.&lt;/p&gt;</description><category>Technology</category><category>Android</category><category>free software</category><category>Ubuntu</category><guid>http://blog.sp.or.at/posts/200911kvm-qemu-and-magic-of-ubuntu-vm-builder.html</guid><pubDate>Wed, 11 Nov 2009 07:25:00 GMT</pubDate></item><item><title>An update on the proprietary Maemo SDK installer</title><link>http://blog.sp.or.at/posts/200911update-on-proprietary-maemo-sdk.html</link><description>&lt;p&gt;Yesterday I &lt;a href="http://techandsp.blogspot.com/2009/11/android-mythbusters-and-openness.html"&gt;wrote&lt;/a&gt; about my dissatisfaction with the current state of the Android 2.0 code tree and how a proprietary install script for Maemo scared me off.&lt;br&gt;&lt;br&gt;As suggested in one of the comments to my post I filed a bug report against Maemo, &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=6087"&gt;bug 6087&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Besides getting quite a few replies to the bug report within a matter of hours Carsten Munk pointed me at &lt;a href="http://maemo-sdk.garage.maemo.org/install.html"&gt;Maemo SDK+&lt;/a&gt;, which has less restrictive licensing.&lt;br&gt;&lt;br&gt;Another comment, by Marius Gedminas (thanks!) pointed me at &lt;a href="http://wiki.maemo.org/Mer/About"&gt;Mer&lt;/a&gt;,&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;a new operating system for small, mobile touch-screen devices. &lt;p&gt;It is Linux based and layers the best open-source elements of Nokia's Maemo platform over a modern Ubuntu base. &lt;/p&gt;&lt;p&gt;The goals of Mer include: &lt;/p&gt; &lt;ul&gt;&lt;li&gt; Integrate the best solutions for a wide variety of small form-factor devices &lt;/li&gt;&lt;li&gt; Encourage wider access to device capabilities through the &lt;a href="http://wiki.maemo.org/Mer/Documentation/Vendor_Social_Contract" title="Mer/Documentation/Vendor Social Contract"&gt;Vendor Social Contract&lt;/a&gt; &lt;/li&gt;&lt;li&gt; Demonstrably provide an easy route to market for vendors &lt;/li&gt;&lt;li&gt; Dramatically reduce costs to vendors of supporting EOL hardware &lt;/li&gt;&lt;li&gt; Focus, harness and support community contributions to the platform &lt;/li&gt;&lt;li&gt; Encourage and ease migration of existing applications &lt;/li&gt;&lt;li&gt; Support experimentation, innovation and development &lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;&lt;/blockquote&gt;</description><category>Technology</category><category>Maemo</category><category>Android</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911update-on-proprietary-maemo-sdk.html</guid><pubDate>Mon, 09 Nov 2009 20:00:00 GMT</pubDate></item><item><title>My Android repositories</title><link>http://blog.sp.or.at/posts/200911my-android-repositories.html</link><description>&lt;p&gt;As I wrote in &lt;a href="http://techandsp.blogspot.com/2009/11/android-roaming-detection-its.html"&gt;my last post&lt;/a&gt; I noticed a few problems with Android's roaming detection code and decided to try fixing it myself.&lt;br&gt;&lt;br&gt;So, I am basing my work on &lt;a href="http://www.cyanogenmod.com/"&gt;CyanogenMod&lt;/a&gt;, which I am also using on my Android device. My repositories are hosted at &lt;a href="http://github.com/speijnik"&gt;github.com/speijnik&lt;/a&gt; and you can fetch (nearly) everything you need for building by using &lt;a href="http://source.android.com/download/using-repo"&gt;repo&lt;/a&gt;. See the &lt;a href="http://github.com/speijnik/android/blob/donut/README"&gt;README&lt;/a&gt; file in my android repository over at github for details.&lt;br&gt;&lt;br&gt;For now only the simplification of the roaming detection code has made it into the repository, but be aware that even though I have published the code I still have neither built nor tried it, as I do not have a working build environment set up yet.&lt;br&gt;&lt;br&gt;Oh, about the working build environment: there seem to be problems with either the webkit code in the Android repositories (unlikely) or with building that code on Ubuntu 9.10 x86-64 (more likely). Right now I am downloading Ubuntu 8.04 LTS i386 for use in a virtual machine. I will let you know whether that fixes my problems or not.&lt;/p&gt;</description><category>Technology</category><category>Android</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911my-android-repositories.html</guid><pubDate>Mon, 09 Nov 2009 19:58:00 GMT</pubDate></item><item><title>Android's roaming detection &amp; its implementation</title><link>http://blog.sp.or.at/posts/200911android-roaming-detection-its.html</link><description>&lt;p&gt;I know I wrote about Android already today, but there is another thing that concerns me right now. I am owner of an Android-based phone (an HTC Dream) and recently switched my mobile network provider. The problem is that my new provider is a &lt;a href="http://en.wikipedia.org/wiki/Mobile_Virtual_Network_Operator"&gt;virtual provider&lt;/a&gt; and as such there is no real network of that provider. Now Android has a feature to turn off broadband connections when in roaming mode, which itself is a great idea and can save you from paying quite a lot of money when the phone connects to 3G abroad, but this feature also turns off broadband connections when roaming locally. All this is being discussed in bug report &lt;a href="http://code.google.com/p/android/issues/detail?id=3499"&gt;#3499&lt;/a&gt;.&lt;br&gt;&lt;br&gt;After noticing this problem I became curious on how Android detects that it is roaming and I found the GsmServiceStateTracker.isRoamingBetweenOperators method to be responsible for that magic, but soon noticed that the method is not only inefficient, but also doesn't work as intended. This is hardly related to the bug mentioned above, but let's have a look at the code in question:&lt;br&gt;&lt;/p&gt;&lt;pre class="java" name="code"&gt;/**&lt;br&gt;* Set roaming state when gsmRoaming is true and, if operator mcc is the&lt;br&gt;* same as sim mcc, ons is different from spn&lt;br&gt;* @param gsmRoaming TS 27.007 7.2 CREG registered roaming&lt;br&gt;* @param s ServiceState hold current ons&lt;br&gt;* @return true for roaming state set&lt;br&gt;*/&lt;br&gt;    private&lt;br&gt;    boolean isRoamingBetweenOperators(boolean gsmRoaming, ServiceState s) {&lt;br&gt;        String spn = SystemProperties.get(PROPERTY_ICC_OPERATOR_ALPHA, "empty");&lt;br&gt;&lt;br&gt;        String onsl = s.getOperatorAlphaLong();&lt;br&gt;        String onss = s.getOperatorAlphaShort();&lt;br&gt;&lt;br&gt;        boolean equalsOnsl = onsl != null &amp;amp;&amp;amp; spn.equals(onsl);&lt;br&gt;        boolean equalsOnss = onss != null &amp;amp;&amp;amp; spn.equals(onss);&lt;br&gt;&lt;br&gt;        String simNumeric = SystemProperties.get(PROPERTY_ICC_OPERATOR_NUMERIC, "");&lt;br&gt;        String operatorNumeric = s.getOperatorNumeric();&lt;br&gt;&lt;br&gt;        boolean equalsMcc = true;&lt;br&gt;        try {&lt;br&gt;            equalsMcc = simNumeric.substring(0, 3).&lt;br&gt;                    equals(operatorNumeric.substring(0, 3));&lt;br&gt;        } catch (Exception e){&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        return gsmRoaming &amp;amp;&amp;amp; !(equalsMcc &amp;amp;&amp;amp; (equalsOnsl || equalsOnss));&lt;br&gt;    }&lt;/pre&gt;&lt;br&gt;Okay, let me summarize what this piece of code does wrong, at least from my understanding:&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;It takes both the network operator alphanumeric identifier and alphanumeric long identifier and compares both to the alphanumeric identifier coming from the SIM card, whilst...&lt;/li&gt;&lt;br&gt;&lt;li&gt;... it could simply use the network and SIM card numeric identifiers and compare those, which should be a lot cheaper than comparing those strings&lt;/li&gt;&lt;br&gt;&lt;li&gt;Then it takes the first three characters/digits of the numeric identifiers (which indicate the country) and compares those&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;Now in my case my SIM card doesn't seem to provide the phone with a alphanumeric identifier, so the first two comparisons always fail for obvious reasons and, looking at the inline-if in the last line of that method my phone will always indicate that I am in roaming mode, even when I am not.&lt;br&gt;&lt;br&gt;The problem is not only the logic which seems to be wrong, but I rather see the inefficient comparisons used there to be a major problem in embedded systems like mobile phones. This is the first piece of Android code I have had a look at, but if all other code is as ugly and inefficient as these few lines Android really needs some major fixes. Related to this I have reported bug &lt;a href="http://code.google.com/p/android/issues/detail?id=4590"&gt;#4590&lt;/a&gt; and forked the &lt;a href="http://github.com/speijnik/android_frameworks_base"&gt;git repository in question&lt;/a&gt; over at github, to fix this method, should be a matter of 5 minutes.</description><category>foss</category><category>Technology</category><category>gsoc</category><category>Debian</category><category>Android</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911android-roaming-detection-its.html</guid><pubDate>Sun, 08 Nov 2009 19:04:00 GMT</pubDate></item><item><title>Android, Mythbusters and openness</title><link>http://blog.sp.or.at/posts/200911android-mythbusters-and-openness.html</link><description>&lt;p&gt;I have been reading a great many posts about Android lately, some consisting of criticism, some of praise and some simply addressing issues in the Android "community". Let's have a look at those.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Matt Porter's &lt;/strong&gt;&lt;strong&gt;Android Mythbusters presentation&lt;/strong&gt;&lt;strong&gt; and Harald Welte's reaction&lt;br&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;I haven't seen the presentation live, but I had a look at &lt;a href="http://tree.celinuxforum.org/CelfPubWiki/ELCEurope2009Presentations?action=AttachFile&amp;amp;do=get&amp;amp;target=Mythbusters_Android.pdf" title="Mythbusters_Android.pdf @ tree.celinux.org"&gt;the slides&lt;/a&gt;. Impressing work done by Matt putting all this information together. However, we all knew that Android only (ab-)uses Linux, without making use of the GNU userland for a long time, didn't we?&lt;br&gt;&lt;br&gt;In his presentation Matt has shown things such as Android's udev "replacement" that uses hardcoded values for device node creation and (on his &lt;a href="http://laforge.gnumonks.org/weblog/2009/11/04/#20091104-android_mythbusters" title="Android Mythbusters (Matt Porter) comment @ laforge.gnumonks.org"&gt;blog&lt;/a&gt;) Harald has then come up with a statement I have found to be very strong:&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;The presentation shows how Google has simply thrown 5-10 years of Linux userspace evolution into the trashcan and re-implemented it partially for no reason.  Things like hard-coded device lists/permissions in object code rather than config files, the lack of support for hot-plugging devices (udev), the lack of kernel headers.  A libc that throws away System V IPC that every unix/Linux software developer takes for granted. The lack of complete POSIX threads.  I could continue this list, but hey, you should read those slides. now!&lt;/blockquote&gt;&lt;br&gt;Now both of these statements target technical details, but the root of the problem seems to be elsewhere.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Where is my Android 2.0?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Okay, that heading might not be making any sense in the context of this post at a first glance, but let me elaborate on that. Google and the Open Handset Alliance refer to Android as being an "Open Source" operating system, but the project is different from "real" Free Software projects: development takes place in a closed group and the results are shared with the community later on, when they are deemed to be ready.&lt;br&gt;&lt;br&gt;This means that innovation also takes place behind closed curtains and that the community is not involved in the actual development process at all. Lately we have seen the result of that, as Motorola is bragging about working close with Google on Android 2.0 ("Eclair"), but the AOSP source trees, open for everyone to have a look at, show no signs of version 2.0. In fact no changes that might even remotely suggest the release of a new major version have been made public in the past few weeks. So where is the openess there?&lt;br&gt;Actually, the Motorola Droid has already shipped with Eclair on 6th, but still, there is no indication that Eclair will be made available to the broader public.&lt;br&gt;&lt;br&gt;In short Android seems to be developed behind closed curtains, with hardly (read no) community input whatsoever and is sometimes released as Free Software, not what I would describe as an open development process.&lt;br&gt;&lt;br&gt;&lt;strong&gt;The Android Market problem&lt;/strong&gt;&lt;br&gt;&lt;br&gt;As we have seen in the past Google is enforcing their copyright on proprietary applications that ship with pretty much every Android device, such as the Android Market. This has become really clear when Steve Kondik received  a cease and desist letter when packing the Google-proprietary applications into his ROMs. Okay, it's Google's right to enforce their copyright and there is nothing wrong with actually doing so, the thing I really have a problem with is something else: the Market is proprietary.&lt;br&gt;&lt;br&gt;Now what this means should become rather clear. You can have an Android device without Google's proprietary bits, but with default settings you just do not have any way of installing additional software. In my opinion the Market should be freed by Google themselves, or the community has to react and come up with a free replacement to overcome the vendor lock-in. Oh, you might know a replacement called &lt;a href="http://www.slideme.org"&gt;SlideMe&lt;/a&gt; (or Mobentoo) already. Well, that bugger is proprietary too, so not a solution at all.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Nokia and Maemo to the rescue&lt;/strong&gt;&lt;br&gt;&lt;br&gt;In most discussions about the openness of Android someone throws in Nokia and &lt;a href="http://www.maemo.org"&gt;Maemo&lt;/a&gt;, as a solution to the dilemma. Reading all those positive comments I simply had to give it a try, but all my hopes were destroyed within a few minutes.&lt;br&gt;&lt;br&gt;Let's start with the good news and let alone the reason why my hopes were destroyed for another minute or two. Maemo is based on Debian GNU/Linux and various Free Software components, such as GTK+, gstreamer, esd and friends. Most of the system is Free Software which is a good thing(tm) and reading all of this really got me into Maemo. Okay, some applications seem to be proprietary, but I am sure that could be fixed rather easily, so I could once for all use a truly open phone.&lt;br&gt;&lt;br&gt;...and then came the &lt;a href="http://repository.maemo.org/stable/fremantle/maemo-sdk-install_5.0.sh"&gt;SDK installer shell script&lt;/a&gt;:&lt;br&gt;&lt;blockquote&gt;#!/bin/sh&lt;br&gt;# Copyright (C) 2006-2009 Nokia Corporation&lt;br&gt;#&lt;br&gt;# This is proprietary software owned by Nokia Corporation.&lt;br&gt;#&lt;br&gt;# Contact: Maemo Integration &amp;lt;integration@maemo.org&amp;gt;&lt;br&gt;# Version: $Revision: 1110 $&lt;/blockquote&gt;&lt;br&gt;Now there is one question you should ask yourself: Why would someone trying to promote his platform as being open make the *installer* script for its SDK proprietary? Come on, it's an installer script, how much of your secret juice could be in there? What's the problem with people modifying it and working on this installer script in an open development environment?&lt;br&gt;&lt;br&gt;I had high hopes for Nokia actually doing a bit better than Google, but it seems they've failed to do so. It may be me overreacting, but a proprietary SDK installer shell script scares me enough not to install the SDK and have a look at it for now nor to think about buying a Maemo-based device in the near future. Please Nokia, either get the facts straight or provide us with a free SDK to your free &amp;amp; open platform.&lt;br&gt;&lt;br&gt;So, in short, Google is bad at working with the community and creating a truly open development process, and Nokia simply fails in terms of not scaring off prospective developers for their open platform with the proprietary SDK installer. Do you have any solutions in terms of an open phone environment, apart from what OpenMoko has come up with?</description><category>foss</category><category>Technology</category><category>personal</category><category>gsoc</category><category>Debian</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911android-mythbusters-and-openness.html</guid><pubDate>Sun, 08 Nov 2009 03:49:00 GMT</pubDate></item><item><title>How to move panels in Gnome 2.28</title><link>http://blog.sp.or.at/posts/200911how-to-move-panels-in-gnome-228.html</link><description>&lt;p&gt;I just installed Ubuntu Karmic Koala on my workstation and came across the problem of not being able to move/drag Gnome panels around in order to have the panels on my primary monitor.&lt;br&gt;On the Debian system that was powering the workstation before this was a non-issue as I could simply click, hold and drag both the upper and the lower panel, but this didn't work.&lt;br&gt;&lt;br&gt;So, after a few minutes of googling I came across an entry at answers.launchpad.net[0] and a blog post, but I cannot seem to remember the URL to that one. I can imagine that some of you might be having the exact same problem, so the solution is holding down the ALT, whilst dragging as usual.&lt;br&gt;&lt;br&gt;[0] &lt;a href="https://answers.launchpad.net/ubuntu/+source/gnome-panel/+question/264"&gt;https://answers.launchpad.net/ubuntu/+source/gnome-panel/+question/264&lt;/a&gt;&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>gsoc</category><category>observations</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911how-to-move-panels-in-gnome-228.html</guid><pubDate>Wed, 04 Nov 2009 09:04:00 GMT</pubDate></item></channel></rss>