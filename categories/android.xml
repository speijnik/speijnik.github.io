<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (Android)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>kvm, qemu and the magic of ubuntu-vm-builder</title><link>http://blog.sp.or.at/posts/200911kvm-qemu-and-magic-of-ubuntu-vm-builder.html</link><description>&lt;p&gt;As I &lt;a href="http://techandsp.blogspot.com/2009/11/my-android-repositories.html"&gt;noted&lt;/a&gt; two days ago I was unable to build Android on Ubuntu 9.10 x86-64 and thus needed to set up a virtual machine.&lt;br&gt;&lt;br&gt;At first I went for my preferred virtualization solution, &lt;a href="http://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; and had to notice that even though I assigned all 4 processor cores of my workstation (along with 2GiB of memory) to the virtual machine building was painfully slow. I immediately ditched the idea of usingÂ  VirtualBox again and decided to give something new to me a try: the combination of &lt;a href="http://www.linux-kvm.org/page/Main_Page"&gt;kvm&lt;/a&gt; and &lt;a href="http://www.qemu.org/"&gt;qemu&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Having Intel VT-x support built into my workstation's processor I thought that this combination should give better performance, and I wasn't disappointed. To be honest, I am astonished on how fast the beast is now. Disk speed still seems to be not as fast as running things natively, but there must be a downside somewhere. :-)&lt;br&gt;&lt;br&gt;After a bit of googling I also found that &lt;a href="https://launchpad.net/vmbuilder"&gt;ubuntu-vm-builder&lt;/a&gt; exists, which simplifies virtual system creation tremendously.&lt;br&gt;&lt;br&gt;My Android working tree is being synchronized right now, which means that I should be able to start building in a few minutes time. I hope the virtual machine stays as fast as it is right now during the build and I hope everything goes well.&lt;/p&gt;</description><category>Technology</category><category>Android</category><category>free software</category><category>Ubuntu</category><guid>http://blog.sp.or.at/posts/200911kvm-qemu-and-magic-of-ubuntu-vm-builder.html</guid><pubDate>Wed, 11 Nov 2009 07:25:00 GMT</pubDate></item><item><title>An update on the proprietary Maemo SDK installer</title><link>http://blog.sp.or.at/posts/200911update-on-proprietary-maemo-sdk.html</link><description>&lt;p&gt;Yesterday I &lt;a href="http://techandsp.blogspot.com/2009/11/android-mythbusters-and-openness.html"&gt;wrote&lt;/a&gt; about my dissatisfaction with the current state of the Android 2.0 code tree and how a proprietary install script for Maemo scared me off.&lt;br&gt;&lt;br&gt;As suggested in one of the comments to my post I filed a bug report against Maemo, &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=6087"&gt;bug 6087&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Besides getting quite a few replies to the bug report within a matter of hours Carsten Munk pointed me at &lt;a href="http://maemo-sdk.garage.maemo.org/install.html"&gt;Maemo SDK+&lt;/a&gt;, which has less restrictive licensing.&lt;br&gt;&lt;br&gt;Another comment, by Marius Gedminas (thanks!) pointed me at &lt;a href="http://wiki.maemo.org/Mer/About"&gt;Mer&lt;/a&gt;,&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;a new operating system for small, mobile touch-screen devices. &lt;p&gt;It is Linux based and layers the best open-source elements of Nokia's Maemo platform over a modern Ubuntu base. &lt;/p&gt;&lt;p&gt;The goals of Mer include: &lt;/p&gt; &lt;ul&gt;&lt;li&gt; Integrate the best solutions for a wide variety of small form-factor devices &lt;/li&gt;&lt;li&gt; Encourage wider access to device capabilities through the &lt;a href="http://wiki.maemo.org/Mer/Documentation/Vendor_Social_Contract" title="Mer/Documentation/Vendor Social Contract"&gt;Vendor Social Contract&lt;/a&gt; &lt;/li&gt;&lt;li&gt; Demonstrably provide an easy route to market for vendors &lt;/li&gt;&lt;li&gt; Dramatically reduce costs to vendors of supporting EOL hardware &lt;/li&gt;&lt;li&gt; Focus, harness and support community contributions to the platform &lt;/li&gt;&lt;li&gt; Encourage and ease migration of existing applications &lt;/li&gt;&lt;li&gt; Support experimentation, innovation and development &lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;&lt;/blockquote&gt;</description><category>Technology</category><category>Maemo</category><category>Android</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911update-on-proprietary-maemo-sdk.html</guid><pubDate>Mon, 09 Nov 2009 20:00:00 GMT</pubDate></item><item><title>My Android repositories</title><link>http://blog.sp.or.at/posts/200911my-android-repositories.html</link><description>&lt;p&gt;As I wrote in &lt;a href="http://techandsp.blogspot.com/2009/11/android-roaming-detection-its.html"&gt;my last post&lt;/a&gt; I noticed a few problems with Android's roaming detection code and decided to try fixing it myself.&lt;br&gt;&lt;br&gt;So, I am basing my work on &lt;a href="http://www.cyanogenmod.com/"&gt;CyanogenMod&lt;/a&gt;, which I am also using on my Android device. My repositories are hosted at &lt;a href="http://github.com/speijnik"&gt;github.com/speijnik&lt;/a&gt; and you can fetch (nearly) everything you need for building by using &lt;a href="http://source.android.com/download/using-repo"&gt;repo&lt;/a&gt;. See the &lt;a href="http://github.com/speijnik/android/blob/donut/README"&gt;README&lt;/a&gt; file in my android repository over at github for details.&lt;br&gt;&lt;br&gt;For now only the simplification of the roaming detection code has made it into the repository, but be aware that even though I have published the code I still have neither built nor tried it, as I do not have a working build environment set up yet.&lt;br&gt;&lt;br&gt;Oh, about the working build environment: there seem to be problems with either the webkit code in the Android repositories (unlikely) or with building that code on Ubuntu 9.10 x86-64 (more likely). Right now I am downloading Ubuntu 8.04 LTS i386 for use in a virtual machine. I will let you know whether that fixes my problems or not.&lt;/p&gt;</description><category>Technology</category><category>Android</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911my-android-repositories.html</guid><pubDate>Mon, 09 Nov 2009 19:58:00 GMT</pubDate></item><item><title>Android's roaming detection &amp; its implementation</title><link>http://blog.sp.or.at/posts/200911android-roaming-detection-its.html</link><description>&lt;p&gt;I know I wrote about Android already today, but there is another thing that concerns me right now. I am owner of an Android-based phone (an HTC Dream) and recently switched my mobile network provider. The problem is that my new provider is a &lt;a href="http://en.wikipedia.org/wiki/Mobile_Virtual_Network_Operator"&gt;virtual provider&lt;/a&gt; and as such there is no real network of that provider. Now Android has a feature to turn off broadband connections when in roaming mode, which itself is a great idea and can save you from paying quite a lot of money when the phone connects to 3G abroad, but this feature also turns off broadband connections when roaming locally. All this is being discussed in bug report &lt;a href="http://code.google.com/p/android/issues/detail?id=3499"&gt;#3499&lt;/a&gt;.&lt;br&gt;&lt;br&gt;After noticing this problem I became curious on how Android detects that it is roaming and I found the GsmServiceStateTracker.isRoamingBetweenOperators method to be responsible for that magic, but soon noticed that the method is not only inefficient, but also doesn't work as intended. This is hardly related to the bug mentioned above, but let's have a look at the code in question:&lt;br&gt;&lt;/p&gt;&lt;pre class="java" name="code"&gt;/**&lt;br&gt;* Set roaming state when gsmRoaming is true and, if operator mcc is the&lt;br&gt;* same as sim mcc, ons is different from spn&lt;br&gt;* @param gsmRoaming TS 27.007 7.2 CREG registered roaming&lt;br&gt;* @param s ServiceState hold current ons&lt;br&gt;* @return true for roaming state set&lt;br&gt;*/&lt;br&gt;    private&lt;br&gt;    boolean isRoamingBetweenOperators(boolean gsmRoaming, ServiceState s) {&lt;br&gt;        String spn = SystemProperties.get(PROPERTY_ICC_OPERATOR_ALPHA, "empty");&lt;br&gt;&lt;br&gt;        String onsl = s.getOperatorAlphaLong();&lt;br&gt;        String onss = s.getOperatorAlphaShort();&lt;br&gt;&lt;br&gt;        boolean equalsOnsl = onsl != null &amp;amp;&amp;amp; spn.equals(onsl);&lt;br&gt;        boolean equalsOnss = onss != null &amp;amp;&amp;amp; spn.equals(onss);&lt;br&gt;&lt;br&gt;        String simNumeric = SystemProperties.get(PROPERTY_ICC_OPERATOR_NUMERIC, "");&lt;br&gt;        String operatorNumeric = s.getOperatorNumeric();&lt;br&gt;&lt;br&gt;        boolean equalsMcc = true;&lt;br&gt;        try {&lt;br&gt;            equalsMcc = simNumeric.substring(0, 3).&lt;br&gt;                    equals(operatorNumeric.substring(0, 3));&lt;br&gt;        } catch (Exception e){&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        return gsmRoaming &amp;amp;&amp;amp; !(equalsMcc &amp;amp;&amp;amp; (equalsOnsl || equalsOnss));&lt;br&gt;    }&lt;/pre&gt;&lt;br&gt;Okay, let me summarize what this piece of code does wrong, at least from my understanding:&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;It takes both the network operator alphanumeric identifier and alphanumeric long identifier and compares both to the alphanumeric identifier coming from the SIM card, whilst...&lt;/li&gt;&lt;br&gt;&lt;li&gt;... it could simply use the network and SIM card numeric identifiers and compare those, which should be a lot cheaper than comparing those strings&lt;/li&gt;&lt;br&gt;&lt;li&gt;Then it takes the first three characters/digits of the numeric identifiers (which indicate the country) and compares those&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;Now in my case my SIM card doesn't seem to provide the phone with a alphanumeric identifier, so the first two comparisons always fail for obvious reasons and, looking at the inline-if in the last line of that method my phone will always indicate that I am in roaming mode, even when I am not.&lt;br&gt;&lt;br&gt;The problem is not only the logic which seems to be wrong, but I rather see the inefficient comparisons used there to be a major problem in embedded systems like mobile phones. This is the first piece of Android code I have had a look at, but if all other code is as ugly and inefficient as these few lines Android really needs some major fixes. Related to this I have reported bug &lt;a href="http://code.google.com/p/android/issues/detail?id=4590"&gt;#4590&lt;/a&gt; and forked the &lt;a href="http://github.com/speijnik/android_frameworks_base"&gt;git repository in question&lt;/a&gt; over at github, to fix this method, should be a matter of 5 minutes.</description><category>foss</category><category>Technology</category><category>gsoc</category><category>Debian</category><category>Android</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911android-roaming-detection-its.html</guid><pubDate>Sun, 08 Nov 2009 19:04:00 GMT</pubDate></item></channel></rss>