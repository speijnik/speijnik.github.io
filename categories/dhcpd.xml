<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (dhcpd)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>ISC dhcpd and IP assignments from a pool to specific hosts only</title><link>http://blog.sp.or.at/posts/201101isc-dhcpd-and-ip-assignments-from-pool.html</link><description>&lt;p&gt;Assigning an IP address statically to a host with a given MAC address using ISC dhcpd is quite trivial, one host entry, a hardware ethernet entry and a fixed-address entry and you are up and running.&lt;br&gt;But what if you want to assign IP addresses from a pool to only a few hosts with specific MAC addresses?&lt;br&gt;&lt;br&gt;Before you ask yourself why someone might want to do that, have a look at my (very real) use-case.&lt;br&gt;I am currently working on setting up an installation server for my employer, &lt;a href="http://www.anexia.at/"&gt;ANEXIA Internetdienstleistungs GmbH&lt;/a&gt;. The server itself uses PXE, TFTP and FAI for installing systems. To be able to do PXE booting one has to set up an DHCP server to provide configuration details, like the TFTP Server Address and the boot filename.&lt;br&gt;&lt;br&gt;Now what one should consider is that this system is designed to provide automatic installations for internet-facing hosts, namely ones in public IP networks. Running a DHCP server in such a network is not a good idea. We neither want to dish out configurations to each and every hosts that asks for them, neither do not want to do a PXE boot each and every time one of our systems is restarted. Now the combination of FAI and pxelinux allows for default configurations which force local booting, but this still causes the (re-)boot time for those systems to increase and potentially also increases the load on the TFTP server. Also, let's not even consider thinking about whether this setup is "clean" or not. I personally believe that dishing out IP addresses in a public IP network is a bad thing(tm) and I guess a lot of people will be nodding when reading these lines.&lt;br&gt;&lt;br&gt;What I was asking myself is how to get something like that set up in a cleaner way, and guess what, I found a solution.&lt;br&gt;The basic idea behind this is only providing IP configuration via DHCP to a specific set of hosts (with a specific set of MAC addresses) and not providing any information to all other hosts. The specific set of hosts are those that we want to do an install run on. This is a no-brainer and I guess the right way to do that, but implementing this approach is not as straight-forward as I initially thought.&lt;br&gt;&lt;br&gt;Actually the implementation of that idea caused me a bit of a headache and cost me a few work-hours to get right, that's why I'd like to share the configuration details with you.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;Let's have a look at how to get such a setup using ISC dhcpd. We are using the fact that ISC dhcpd allows you to not only configure a subnet, but rather also pools inside subnets, which can have allow and deny rules. Such rules can be in the form of "allow/deny member of ", where classes (and subclasses, keep on reading for details) can be defined inside the configuration file as well.&lt;br&gt;&lt;br&gt;What we first did was creating a subnet with a pool declaration, as follows:&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;subnet 10.0.0.0 netmask 255.255.255.0 {  &lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    option routers &lt;span class="Apple-style-span" style="font-style: normal;"&gt;&lt;i&gt;10.0.0.254&lt;/i&gt;&lt;/span&gt;;&lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    option broadcast-address &lt;span class="Apple-style-span" style="font-style: normal;"&gt;&lt;i&gt;10.0.0.&lt;/i&gt;&lt;/span&gt;255;&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    filename "fai/pxelinux.0";&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    next-server &lt;span class="Apple-style-span" style="font-style: normal;"&gt;&lt;i&gt;10.0.0.254&lt;/i&gt;&lt;/span&gt;;&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    server-name "10.0.0.254";&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;    pool { &lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;      allow members of "install"; &lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;      range 10.0.0.10 10.0.0.230; &lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;   }&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;}&lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;This one configures the subnet 10.0.0.0/24, with 10.0.0.254 being the network gateway, 10.0.0.254 being the TFTP server and "fai/pxelinux.0" being the TFTP filename. Additionally pool allows us to define a range of IP addresses we want to use, along with a line stating that only members of the "install" class should get a network configuration. If you do not have any other subnet defined in your config and a client that is not in this "install" class asks for an IP address you will see something like this in your syslog:  "&lt;i&gt;dhcpd: DHCPDISCOVER from 11:22:33:44:55:66 via eth1: network 10.0.0/24: no free leases&lt;/i&gt;". dhcpd will not even answer these requests and thus the client will not even know that there is a DHCP server running here. Exactly what we wanted.&lt;br&gt;&lt;br&gt;I wrote about this giving me a headache, but so far things have been pretty straight-forward. Getting this far did not take very long, believe me.&lt;br&gt;&lt;br&gt;Next thing we did was defining that "install" class as follows:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;i&gt;class "install" { match hardware; }&lt;/i&gt;&lt;/blockquote&gt;Again, not very hard to do. This tells dhcpd to look for subclasses of "install" with a matching hardware-address. So let's have a look at the subclass for, let's say the host with MAC address "11:22:33:44:55:66":&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;i&gt;subclass "install" &lt;b&gt;1:&lt;/b&gt;11:22:33:44:55:66;&lt;/i&gt;&lt;/blockquote&gt;I intentionally highlighted the leading "1:" there. This means nothing more or less than "ethernet". Without that leading "1:" you won't get anywhere. Matching will fail, simple as that. It took me a while to find  information about this in "&lt;i&gt;man 5 dhcp-eval&lt;/i&gt;". Quoting parts of the interesting section:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;i&gt;The hardware operator returns a data string whose first  element  is&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;the  type of network interface indicated in packet being considered,&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;i&gt;and whose subsequent elements are client’s link-layer address. [...] Hardware types include  ethernet  (1),  token-ring  (6), and fddi (8).&lt;/i&gt;&lt;/blockquote&gt;&lt;/blockquote&gt; Now, with the combination of the subnet, pool, class and subclass directives we could get the setup we wanted: a DHCP server only providing IP configuration to a specific set of hosts and ignoring all other DHCP requests.&lt;br&gt;&lt;br&gt;If you have any comments about this setup or ideas on how to get something similar set-up using another approach feel free to leave a comment.&lt;br&gt;&lt;br&gt;Personal final note: accidentally typing 80 instead of 08 in a MAC address will cost you an additional two hours and will even have you re-compile ISC dhcpd with eval debugging turned on, believe me. :-)</description><category>Technology</category><category>dhcpd</category><category>sysadmin</category><category>Networking</category><category>isc dhcpd</category><guid>http://blog.sp.or.at/posts/201101isc-dhcpd-and-ip-assignments-from-pool.html</guid><pubDate>Sat, 01 Jan 2011 21:01:00 GMT</pubDate></item></channel></rss>