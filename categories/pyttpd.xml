<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (pyttpd)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Introducing pyttpd</title><link>http://blog.sp.or.at/posts/200903introducing-pyttpd.html</link><description>&lt;p&gt;In this article I would like to inform you about my newest pet-project: &lt;a href="http://code.sp-its.at/projects/pyttpd" title="pyttpd project @ code.sp-its.at"&gt;pyttpd&lt;/a&gt;.&lt;br&gt;&lt;br&gt;pyttpd is my effort of implementing a webserver in Python, with a focus on security (through privilege separation), extensibility and scalability.&lt;br&gt;&lt;br&gt;I started this project because I was not entirely happy with the lack of flexibility and support for privilege separation by popular webservers. Whilst both &lt;a href="http://lighttpd.net" title="lighttpd.net"&gt;lighttpd&lt;/a&gt; and &lt;a href="http://httpd.apache.org" title="httpd.apache.org"&gt;Apache httpd&lt;/a&gt; provide means of running processes under different users these usually require hacks like &lt;a href="http://httpd.apache.org/docs/2.0/suexec.html" title="suexec (apache 2.0 documentation)"&gt;suexec&lt;/a&gt;. Additionally I am somehow curious about how a fully-fledged webserver implemented in Python would perform compared to the mentioned daemons.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Security through extensive use of Privilege Separation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Whilst it is common for daemons to initially run as a privileged user and drop privileges as soon as possible it is possible to make more extensive use of setuid and friends.&lt;br&gt;pyttpd's design aims at creating one &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#privileged-master-process-pmaster" title="pmaster (pyttpd documentation)"&gt;privileged process&lt;/a&gt;, which only binds to privileged ports and spawns subprocesses.&lt;br&gt;All subprocesses have specific tasks, such as routing &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#unprivileged-master-process-umaster" title="umaster (pyttpd documentation)"&gt;between all processes&lt;/a&gt;, &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#id1" title="listener process (pyttpd documentation)"&gt;protocol-specific parsing&lt;/a&gt; of incoming requests and handling &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#id2" title="vhost process (pyttpd documentation)"&gt;processing&lt;/a&gt; of those requests.&lt;br&gt;The point is that all these processes do not run as "&lt;em&gt;www-data&lt;/em&gt;" or another common account, but that a logic separation takes place on a per-host basis. This means that if the webserver is hosting &lt;em&gt;www.example.org&lt;/em&gt; and &lt;em&gt;webapp.example.org&lt;/em&gt; those will be running under different system accounts, making it hard to interfere with each other. This method should also enable the use of &lt;a href="http://en.wikipedia.org/wiki/Mandatory_access_control" title="Mandatory Access Control @ en.wikipedia.org"&gt;MAC&lt;/a&gt; mechanisms such as &lt;a href="http://en.wikipedia.org/wiki/SELinux" title="SELinux @ en.wikipedia.org"&gt;SELinux&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Simplified_Mandatory_Access_Control_Kernel" title="SMACK @ en.wikipedia.org"&gt;SMACK&lt;/a&gt; more efficiently.&lt;br&gt;&lt;br&gt;The design choice of having separate processes for each vhost comes with another benefit: users (or customers) "owning" a vhost could potentionally be allowed to modify parts of the vhost's configuration (excluding UID, GID, and other security-relevant options) on their own.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Early status&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Right now pyttpd is in a very early planning stage, with no code to show yet. I am still in the middle of the process of writing down all ideas that come to my mind, weeding some out and documenting the others.&lt;br&gt;So what do I have to show you then? Well, the the concept section of the &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts" title="Concepts (pyttpd documentation)"&gt;documentation&lt;/a&gt; is online now and I am planning on extending it in the next few days and eventually start writing code rather sooner than later.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Your ideas...&lt;/strong&gt;&lt;br&gt;&lt;br&gt;...and opinions are what I am really interested in. If you are interested in this project I would love if you got involved in some way. Feel free to create tickets at pyttpd's &lt;a href="http://code.sp-its.at/projects/pyttpd" title="pyttpd project @ code.sp-its.at"&gt;project page&lt;/a&gt; if you have an idea you feel is worth adding or if one of my ideas is flawed, create a comment here or send me an &lt;a href="mailto:stephan%20at%20peijnik%20dot%20at" title="send email to stephan at peijnik dot at"&gt;email&lt;/a&gt;.&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>pyttpd</category><category>free software</category><guid>http://blog.sp.or.at/posts/200903introducing-pyttpd.html</guid><pubDate>Mon, 30 Mar 2009 23:27:00 GMT</pubDate></item></channel></rss>