<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (foss)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Android's roaming detection &amp; its implementation</title><link>http://blog.sp.or.at/posts/200911android-roaming-detection-its.html</link><description>&lt;p&gt;I know I wrote about Android already today, but there is another thing that concerns me right now. I am owner of an Android-based phone (an HTC Dream) and recently switched my mobile network provider. The problem is that my new provider is a &lt;a href="http://en.wikipedia.org/wiki/Mobile_Virtual_Network_Operator"&gt;virtual provider&lt;/a&gt; and as such there is no real network of that provider. Now Android has a feature to turn off broadband connections when in roaming mode, which itself is a great idea and can save you from paying quite a lot of money when the phone connects to 3G abroad, but this feature also turns off broadband connections when roaming locally. All this is being discussed in bug report &lt;a href="http://code.google.com/p/android/issues/detail?id=3499"&gt;#3499&lt;/a&gt;.&lt;br&gt;&lt;br&gt;After noticing this problem I became curious on how Android detects that it is roaming and I found the GsmServiceStateTracker.isRoamingBetweenOperators method to be responsible for that magic, but soon noticed that the method is not only inefficient, but also doesn't work as intended. This is hardly related to the bug mentioned above, but let's have a look at the code in question:&lt;br&gt;&lt;/p&gt;&lt;pre class="java" name="code"&gt;/**&lt;br&gt;* Set roaming state when gsmRoaming is true and, if operator mcc is the&lt;br&gt;* same as sim mcc, ons is different from spn&lt;br&gt;* @param gsmRoaming TS 27.007 7.2 CREG registered roaming&lt;br&gt;* @param s ServiceState hold current ons&lt;br&gt;* @return true for roaming state set&lt;br&gt;*/&lt;br&gt;    private&lt;br&gt;    boolean isRoamingBetweenOperators(boolean gsmRoaming, ServiceState s) {&lt;br&gt;        String spn = SystemProperties.get(PROPERTY_ICC_OPERATOR_ALPHA, "empty");&lt;br&gt;&lt;br&gt;        String onsl = s.getOperatorAlphaLong();&lt;br&gt;        String onss = s.getOperatorAlphaShort();&lt;br&gt;&lt;br&gt;        boolean equalsOnsl = onsl != null &amp;amp;&amp;amp; spn.equals(onsl);&lt;br&gt;        boolean equalsOnss = onss != null &amp;amp;&amp;amp; spn.equals(onss);&lt;br&gt;&lt;br&gt;        String simNumeric = SystemProperties.get(PROPERTY_ICC_OPERATOR_NUMERIC, "");&lt;br&gt;        String operatorNumeric = s.getOperatorNumeric();&lt;br&gt;&lt;br&gt;        boolean equalsMcc = true;&lt;br&gt;        try {&lt;br&gt;            equalsMcc = simNumeric.substring(0, 3).&lt;br&gt;                    equals(operatorNumeric.substring(0, 3));&lt;br&gt;        } catch (Exception e){&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        return gsmRoaming &amp;amp;&amp;amp; !(equalsMcc &amp;amp;&amp;amp; (equalsOnsl || equalsOnss));&lt;br&gt;    }&lt;/pre&gt;&lt;br&gt;Okay, let me summarize what this piece of code does wrong, at least from my understanding:&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;It takes both the network operator alphanumeric identifier and alphanumeric long identifier and compares both to the alphanumeric identifier coming from the SIM card, whilst...&lt;/li&gt;&lt;br&gt;&lt;li&gt;... it could simply use the network and SIM card numeric identifiers and compare those, which should be a lot cheaper than comparing those strings&lt;/li&gt;&lt;br&gt;&lt;li&gt;Then it takes the first three characters/digits of the numeric identifiers (which indicate the country) and compares those&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;Now in my case my SIM card doesn't seem to provide the phone with a alphanumeric identifier, so the first two comparisons always fail for obvious reasons and, looking at the inline-if in the last line of that method my phone will always indicate that I am in roaming mode, even when I am not.&lt;br&gt;&lt;br&gt;The problem is not only the logic which seems to be wrong, but I rather see the inefficient comparisons used there to be a major problem in embedded systems like mobile phones. This is the first piece of Android code I have had a look at, but if all other code is as ugly and inefficient as these few lines Android really needs some major fixes. Related to this I have reported bug &lt;a href="http://code.google.com/p/android/issues/detail?id=4590"&gt;#4590&lt;/a&gt; and forked the &lt;a href="http://github.com/speijnik/android_frameworks_base"&gt;git repository in question&lt;/a&gt; over at github, to fix this method, should be a matter of 5 minutes.</description><category>foss</category><category>Technology</category><category>gsoc</category><category>Debian</category><category>Android</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911android-roaming-detection-its.html</guid><pubDate>Sun, 08 Nov 2009 19:04:00 GMT</pubDate></item><item><title>Android, Mythbusters and openness</title><link>http://blog.sp.or.at/posts/200911android-mythbusters-and-openness.html</link><description>&lt;p&gt;I have been reading a great many posts about Android lately, some consisting of criticism, some of praise and some simply addressing issues in the Android "community". Let's have a look at those.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Matt Porter's &lt;/strong&gt;&lt;strong&gt;Android Mythbusters presentation&lt;/strong&gt;&lt;strong&gt; and Harald Welte's reaction&lt;br&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;I haven't seen the presentation live, but I had a look at &lt;a href="http://tree.celinuxforum.org/CelfPubWiki/ELCEurope2009Presentations?action=AttachFile&amp;amp;do=get&amp;amp;target=Mythbusters_Android.pdf" title="Mythbusters_Android.pdf @ tree.celinux.org"&gt;the slides&lt;/a&gt;. Impressing work done by Matt putting all this information together. However, we all knew that Android only (ab-)uses Linux, without making use of the GNU userland for a long time, didn't we?&lt;br&gt;&lt;br&gt;In his presentation Matt has shown things such as Android's udev "replacement" that uses hardcoded values for device node creation and (on his &lt;a href="http://laforge.gnumonks.org/weblog/2009/11/04/#20091104-android_mythbusters" title="Android Mythbusters (Matt Porter) comment @ laforge.gnumonks.org"&gt;blog&lt;/a&gt;) Harald has then come up with a statement I have found to be very strong:&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;The presentation shows how Google has simply thrown 5-10 years of Linux userspace evolution into the trashcan and re-implemented it partially for no reason.  Things like hard-coded device lists/permissions in object code rather than config files, the lack of support for hot-plugging devices (udev), the lack of kernel headers.  A libc that throws away System V IPC that every unix/Linux software developer takes for granted. The lack of complete POSIX threads.  I could continue this list, but hey, you should read those slides. now!&lt;/blockquote&gt;&lt;br&gt;Now both of these statements target technical details, but the root of the problem seems to be elsewhere.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Where is my Android 2.0?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Okay, that heading might not be making any sense in the context of this post at a first glance, but let me elaborate on that. Google and the Open Handset Alliance refer to Android as being an "Open Source" operating system, but the project is different from "real" Free Software projects: development takes place in a closed group and the results are shared with the community later on, when they are deemed to be ready.&lt;br&gt;&lt;br&gt;This means that innovation also takes place behind closed curtains and that the community is not involved in the actual development process at all. Lately we have seen the result of that, as Motorola is bragging about working close with Google on Android 2.0 ("Eclair"), but the AOSP source trees, open for everyone to have a look at, show no signs of version 2.0. In fact no changes that might even remotely suggest the release of a new major version have been made public in the past few weeks. So where is the openess there?&lt;br&gt;Actually, the Motorola Droid has already shipped with Eclair on 6th, but still, there is no indication that Eclair will be made available to the broader public.&lt;br&gt;&lt;br&gt;In short Android seems to be developed behind closed curtains, with hardly (read no) community input whatsoever and is sometimes released as Free Software, not what I would describe as an open development process.&lt;br&gt;&lt;br&gt;&lt;strong&gt;The Android Market problem&lt;/strong&gt;&lt;br&gt;&lt;br&gt;As we have seen in the past Google is enforcing their copyright on proprietary applications that ship with pretty much every Android device, such as the Android Market. This has become really clear when Steve Kondik receivedÂ  a cease and desist letter when packing the Google-proprietary applications into his ROMs. Okay, it's Google's right to enforce their copyright and there is nothing wrong with actually doing so, the thing I really have a problem with is something else: the Market is proprietary.&lt;br&gt;&lt;br&gt;Now what this means should become rather clear. You can have an Android device without Google's proprietary bits, but with default settings you just do not have any way of installing additional software. In my opinion the Market should be freed by Google themselves, or the community has to react and come up with a free replacement to overcome the vendor lock-in. Oh, you might know a replacement called &lt;a href="http://www.slideme.org"&gt;SlideMe&lt;/a&gt; (or Mobentoo) already. Well, that bugger is proprietary too, so not a solution at all.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Nokia and Maemo to the rescue&lt;/strong&gt;&lt;br&gt;&lt;br&gt;In most discussions about the openness of Android someone throws in Nokia and &lt;a href="http://www.maemo.org"&gt;Maemo&lt;/a&gt;, as a solution to the dilemma. Reading all those positive comments I simply had to give it a try, but all my hopes were destroyed within a few minutes.&lt;br&gt;&lt;br&gt;Let's start with the good news and let alone the reason why my hopes were destroyed for another minute or two. Maemo is based on Debian GNU/Linux and various Free Software components, such as GTK+, gstreamer, esd and friends. Most of the system is Free Software which is a good thing(tm) and reading all of this really got me into Maemo. Okay, some applications seem to be proprietary, but I am sure that could be fixed rather easily, so I could once for all use a truly open phone.&lt;br&gt;&lt;br&gt;...and then came the &lt;a href="http://repository.maemo.org/stable/fremantle/maemo-sdk-install_5.0.sh"&gt;SDK installer shell script&lt;/a&gt;:&lt;br&gt;&lt;blockquote&gt;#!/bin/sh&lt;br&gt;# Copyright (C) 2006-2009 Nokia Corporation&lt;br&gt;#&lt;br&gt;# This is proprietary software owned by Nokia Corporation.&lt;br&gt;#&lt;br&gt;# Contact: Maemo Integration &amp;lt;integration@maemo.org&amp;gt;&lt;br&gt;# Version: $Revision: 1110 $&lt;/blockquote&gt;&lt;br&gt;Now there is one question you should ask yourself: Why would someone trying to promote his platform as being open make the *installer* script for its SDK proprietary? Come on, it's an installer script, how much of your secret juice could be in there? What's the problem with people modifying it and working on this installer script in an open development environment?&lt;br&gt;&lt;br&gt;I had high hopes for Nokia actually doing a bit better than Google, but it seems they've failed to do so. It may be me overreacting, but a proprietary SDK installer shell script scares me enough not to install the SDK and have a look at it for now nor to think about buying a Maemo-based device in the near future. Please Nokia, either get the facts straight or provide us with a free SDK to your free &amp;amp; open platform.&lt;br&gt;&lt;br&gt;So, in short, Google is bad at working with the community and creating a truly open development process, and Nokia simply fails in terms of not scaring off prospective developers for their open platform with the proprietary SDK installer. Do you have any solutions in terms of an open phone environment, apart from what OpenMoko has come up with?</description><category>foss</category><category>Technology</category><category>personal</category><category>gsoc</category><category>Debian</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911android-mythbusters-and-openness.html</guid><pubDate>Sun, 08 Nov 2009 03:49:00 GMT</pubDate></item><item><title>How to move panels in Gnome 2.28</title><link>http://blog.sp.or.at/posts/200911how-to-move-panels-in-gnome-228.html</link><description>&lt;p&gt;I just installed Ubuntu Karmic Koala on my workstation and came across the problem of not being able to move/drag Gnome panels around in order to have the panels on my primary monitor.&lt;br&gt;On the Debian system that was powering the workstation before this was a non-issue as I could simply click, hold and drag both the upper and the lower panel, but this didn't work.&lt;br&gt;&lt;br&gt;So, after a few minutes of googling I came across an entry at answers.launchpad.net[0] and a blog post, but I cannot seem to remember the URL to that one. I can imagine that some of you might be having the exact same problem, so the solution is holding down the ALT, whilst dragging as usual.&lt;br&gt;&lt;br&gt;[0] &lt;a href="https://answers.launchpad.net/ubuntu/+source/gnome-panel/+question/264"&gt;https://answers.launchpad.net/ubuntu/+source/gnome-panel/+question/264&lt;/a&gt;&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>gsoc</category><category>observations</category><category>free software</category><guid>http://blog.sp.or.at/posts/200911how-to-move-panels-in-gnome-228.html</guid><pubDate>Wed, 04 Nov 2009 09:04:00 GMT</pubDate></item><item><title>Summer Of Code 2009: Working for Debian</title><link>http://blog.sp.or.at/posts/200904summer-of-code-2009-working-for-debian.html</link><description>&lt;p&gt;Yesterday Google announced the students and projects that have been accepted for Google Summer Of Code 2009 and guess what: &lt;a href="http://wiki.debian.org/SummerOfCode2009/Distribution_independent_update_manager" title="Distribution-independent update-manager @ wiki.debian.org"&gt;my project&lt;/a&gt; was accepted. This means I will be working full-time on FOSS this summer.&lt;br&gt;&lt;br&gt;So I guess it's about time to introduce my project to you: Distribution-independent update manager, mentored by &lt;a href="https://launchpad.net/~mvo" title="mvo @ launchpad.net"&gt;Michael Vogt (mvo)&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Okay, I believe some of you might wonder what this project is all about, as &lt;a href="http://packages.qa.debian.org/u/update-manager.html" title="update-manager @ packages.qa.debian.org"&gt;update-manager&lt;/a&gt; is in the Debian package archive already. There is a problem with update-manager though. As you see in the package's version number (it contains ".debian") update-manager has been adapted for use in Debian. Also, Debian contains update-manager 0.68 right now, whilst upstream (Ubuntu in this case) has released &lt;a href="http://bazaar.launchpad.net/~ubuntu-core-dev/update-manager/main/revision/1374" title="update-manager revision log @ bazaar.launchpad.net"&gt;0.111.6&lt;/a&gt; (actually there were quite a few upstream versions meanwhile). The reason Debian is nowhere near being up-to-date with upstream is that right now a lot of effort has to be put into porting update-manager to Debian every time a new upstream release is made, because certain Ubuntu-specific functionality breaks update-manager in more or less severe ways on Debian.&lt;br&gt;&lt;br&gt;This leads me directly to what my project is about: making update-manager (Ubuntu-) distribution-independent, but not package manager independent.&lt;br&gt;There are 6 main goals for this project, which I will be working on in the order below.&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;Analyzing the code and identifying Ubuntu-specific parts.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Creating a distribution-plugin interface and moving the Ubuntu-specific parts into a distribution-plugin, creating a core package that is distribution-independent.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Creating a special notification for important/security related updates and providing the code that handles updates from security.debian.org as such.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Creating a backend-plugin interface, moving the synaptics backend into a backend-plugin and optionally create a python-apt based plugin.&lt;/li&gt;&lt;br&gt;&lt;li&gt;UI redesign, providing a simpler interface to average joe, whilst allowing more experienced users to optionally display more information.&lt;/li&gt;&lt;br&gt;&lt;li&gt;Automatic downloading &amp;amp; installation of updates. This is still up to discussion, as automatic downloading is already provided by software-properties (-gtk and -kde) and automatic installation can be handled by unattended-upgrades. Both packages are part of Debian already.&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;Please note that this list should not be considered final and may be extended or modified over time. It exists to give you an overview of what exactly my project is about and how I am planning on carrying out the tasks.&lt;br&gt;&lt;br&gt;Finally I wanted to let you know that I will keep you posted on the progress I am making, via this blog. Alternatively a blog aggregator for Debian's GSoC students has been set up over at &lt;a href="http://soc.alioth.debian.org/feeds/blogs/" title="Debian's GSoC blog aggregator"&gt;http://soc.alioth.debian.org/feeds/blogs/&lt;/a&gt;, where you can not only find my posts, but those of all of Debian's students.</description><category>foss</category><category>gsoc</category><category>Debian</category><guid>http://blog.sp.or.at/posts/200904summer-of-code-2009-working-for-debian.html</guid><pubDate>Tue, 21 Apr 2009 06:10:00 GMT</pubDate></item><item><title>Python everywhere: computer games</title><link>http://blog.sp.or.at/posts/200904python-everywhere-computer-games.html</link><description>&lt;p&gt;This is the second article in my series Python everywhere and covers the use of Python for in computer games. The first article of this series covered the use of Python for the conficker worm scanner tool and can be found &lt;a href="http://blog.peijnik.at/2009/03/31/python-everywhere-conficker-scanner/" title="Python everywhere: conficker scanner"&gt;here&lt;/a&gt;.&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;strong&gt;Games written in Python&lt;/strong&gt;&lt;br&gt;&lt;br&gt;As &lt;a href="http://www.pygame.org/" title="pygame.org"&gt;PyGame&lt;/a&gt; provides a nice library for writing games purely in Python it is becoming more common to use Python for this task too. The book "&lt;a href="http://www.apress.com/book/view/9781590598726" title="Beginning Game Development with Python and Pygame  @ apress.com"&gt;Beginning Game Development with Python and Pygame&lt;/a&gt;" is linked directly from the PyGame homepage, and thus is probably a good resource if you want to start writing games in Python.&lt;br&gt;&lt;br&gt;However, I do not want to go into detail on how this library works, but rather provide you with a few examples of games written in Python. To provide you with a few examples I had a look at the &lt;a href="http://www.pyweek.org/" title="pyweek.org"&gt;PyWeek&lt;/a&gt; homepage. PyWeek is a Python Game Programming Challenge which invites everyone to participate, so the winners of this contest are of high-quality, and I'm showing you the latest two winners.&lt;br&gt;&lt;br&gt;There are always two winners of PyWeek in for indivduals who have created games and teams. The latest winners are "&lt;a href="http://www.pyweek.org/e/Rambo/" title="Team Rambo @ pyweek.org"&gt;Team Rambo&lt;/a&gt;" in the individual effort category and "&lt;a href="http://www.pyweek.org/e/midnightsun/" title="Midnight Sun @ pyweek.org"&gt;Midnight Sun&lt;/a&gt;" with their two-man team.&lt;br&gt;&lt;br&gt;&lt;strong&gt;PyWeek: Team Rambo's Stringrolled (individual)&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p style="text-align: left;"&gt;Stringrolled makes use of the pygame library I mentioned earlier and is a &lt;a href="http://en.wikipedia.org/wiki/Platform_game" title="Platform game @ en.wikipedia.org"&gt;platform game&lt;/a&gt;. In a mere 2377 lines of code, including comments and blank lines, Team Rambo created an impressive game, coming with a story, easy-to-learn controls and nice 2D-graphics, screenshot below. &lt;a href="http://media.pyweek.org/dl/7/Rambo/pyweek3.png"&gt;&lt;img alt="Stringrolled screenshot @ media.pyweek.org" class="aligncenter" height="240" src="http://media.pyweek.org/dl/7/Rambo/pyweek3.png" title="Screenshot of Stringrolled" width="384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;strong&gt;PyWeek: Midnight Sun's Kite Story&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;Kite Story is yet another interesting game, with game mechanics I have not seen ever before. You are controlling a kite with your mouse and are trying to catch objects, such as bees and birds, with the kite's rope. So what you basically do you draw a loop around an object with&lt;a href="http://media.pyweek.org/dl/7/midnightsun/ss2.png"&gt;&lt;img alt="Kite Story screenshot @ media.pyweek.org" class="alignleft" height="359" src="http://media.pyweek.org/dl/7/midnightsun/ss2.png" title="Kite Story: catching a sky diver" width="357"&gt;&lt;/a&gt; your mouse and that way catch it. Every third cought object you advance to the next level, but keep in mind not to collide with the objects, because you will lose them and in turn be doing the previous level again, screenshot below. It should be noted that this game does not make use of PyGame at all, but rather relies on &lt;a href="http://pyglet.org/" title="pyglet.org"&gt;pyglet&lt;/a&gt;, and is 1997 lines of code in length, again counting blank lines and comments too.&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;strong&gt;Games using Python&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;You have seen now that it is possible to write a game completely in Python, but there's another use-case of Python in games: scripting.&lt;br&gt;Some (proprietary) games, such as &lt;a href="http://www.2kgames.com/civ4/blog_03.htm" title="Modding Sid Meier's Civilization IV @ 2kgames.com"&gt;Civilization IV&lt;/a&gt;, offer Python support in their editors and SDKs. This quote from the article at 2kgames.com should give you a good idea of what can be done using Python in Civilization IV:&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;The next level offers &lt;strong&gt;Python and XML&lt;/strong&gt; support, letting modders with more experience manipulate the game world and everything in it. XML (eXtensible Markup Language) files can be edited in standard text editors or in special XML file editors that have ease-of-use features like a grid view. Editing these files will allow players to tweak simple game rules and change or add content. For instance, they can add new unit or building types, change the cost of wonders, or add new civilizations. Players can also change the sounds played at certain times or edit the play list for your soundtrack. NOTE: You can have custom soundtracks simply by adding music to the custom folder. You only need to edit the XML in order to assign certain pieces to specific eras or remove certain pieces.&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;The Python scripting language is fully integrated throughout the game and offers experienced modders a chance to really strut their stuff! People with some programming skills will be able to do things to alter the game in interesting and extraordinary ways. For instance, all of the game interface screens are exposed to Python, so modders will be able to change the information that's displayed, as well as how it's positioned on the screen. We also use Python to create and generate all of the random map scripts that are included in the game. So, players will now have the ability to add scripted events to the game like automatically generating units when a tile is reached, having specific situations trigger automatic war, or get this, bringing back Civil Wars caused by unrest, Civ II style!&lt;/blockquote&gt;&lt;br&gt;&lt;a href="http://www.eveonline.com/" title="EVE Online Homepage"&gt;EVE Online&lt;/a&gt; is another game making use of Python, as an &lt;a href="http://www.eveonline.com/devblog.asp?a=blog&amp;amp;bid=488" title="stackless python 2.5 @ eveonline.com"&gt;article&lt;/a&gt; over at eveonline.com points out.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Python everywhere - also in compuater games&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Even though I am sure you can come up with a lot more examples of Python being used in computer games I think I have proven my point. Python is being used not only to create computer games, but sometimes also to provide developers with a way of extending games. To me personally it feels as if adoption of Python for this very task is increasing too, and I expect Python to be used even more by the game development community in the future.&lt;br&gt;&lt;br&gt;You can expect the third part of this series to be released in about a week, so please check back regularly if you like the series.</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200904python-everywhere-computer-games.html</guid><pubDate>Thu, 02 Apr 2009 16:35:00 GMT</pubDate></item><item><title>Python everywhere: extending applications with Python</title><link>http://blog.sp.or.at/posts/200903python-everywhere-extending.html</link><description>&lt;p&gt;Extending applications with Python: gimp, Evolution, Inkscape, Paint Shop Pro, [...]&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200903python-everywhere-extending.html</guid><pubDate>Tue, 31 Mar 2009 13:33:00 GMT</pubDate></item><item><title>Python everywhere: A Python Operating System called cleese</title><link>http://blog.sp.or.at/posts/200903python-everywhere-python-operating.html</link><description>&lt;p&gt;Cleese....&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200903python-everywhere-python-operating.html</guid><pubDate>Tue, 31 Mar 2009 13:31:00 GMT</pubDate></item><item><title>Python everywhere: conficker scanner</title><link>http://blog.sp.or.at/posts/200903python-everywhere-conficker-scanner.html</link><description>&lt;p&gt;This article is the first in my new series "Python everywhere".&lt;br&gt;&lt;br&gt;As this is the first article in this series I would like to explain what the series is all about.&lt;br&gt;As an avid Python user and developer I want to share my observations whenever I find Python applications doing not-so-unusual things, Python applications running on embedded devices. In the end I want to point out just what the name of this series suggests: Python is everywhere and can be used for everything.&lt;br&gt;&lt;br&gt;So, straight ahead to the first issue: the conficker scanner.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;When reading an article about a detection mechanism for the conficker worm on &lt;a href="http://www.heise.de/security/Deutsche-Forscher-entwickeln-Netzwerk-Scan-fuer-Conficker-Wurm--/news/meldung/135434" title="Deutsche Forscher entwickeln Netzwerk-Scan fÃ¼r Conficker-Wurm @ heise.de"&gt;heise Security&lt;/a&gt; [german] I was myself wondering a few things, but wanted to give it a try. So I followed the link to the article &lt;a href="http://honeynet.org/node/388" title="Detecting Conficker @ honeynet.org"&gt;Detecting Conficker&lt;/a&gt;, by &lt;a href="http://honeynet.org/blog/9" title="Werner Tillmann\s blog @ honeynet.org"&gt;Tillmann Werner&lt;/a&gt;. Before clicking the link I was wondering whether I could get this tool running on GNU/Linux using wine, or another method.&lt;br&gt;&lt;br&gt;After downloading the ZIP file and unpacking it I thought I was dreaming. There were two Python files, along with a &lt;em&gt;COPYING&lt;/em&gt; file.&lt;br&gt;So, even though before having a look at the code I wanted to know the COPYING conditions, and again I saw something unexpected: it's licensed under the &lt;strong&gt;GPLv3&lt;/strong&gt;, great!&lt;br&gt;&lt;br&gt;As there are some computers running a proprietary operating system from Redmond on this network I immediately gave it a shot. I started the script (&lt;em&gt;scs.py&lt;/em&gt;), and after fulfilling its requirements (namely the &lt;em&gt;impacket&lt;/em&gt; Python module) I ran it on the local network and it worked without any problems. No conficker found on this network, after all my flatmates have their systems secured - good.&lt;br&gt;&lt;br&gt;So there you have another use-case for Python: detecting malware over the network.&lt;br&gt;Kudos should go to Tillmann Werner, not only for this piece of Python code, but also for his work on the &lt;a href="http://honeynet.org/" title="honeynet project (honeynet.org)"&gt;honeynet project&lt;/a&gt; and, together with Felix Leder, the great &lt;a href="https://www.honeynet.org/papers/conficker" title="Know Your Enemy: Containing Conficker paper @ honeynet.org"&gt;analysis&lt;/a&gt; of conficker. Keep up the good work, and thanks for proving Python can also be used for this task.&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200903python-everywhere-conficker-scanner.html</guid><pubDate>Tue, 31 Mar 2009 11:30:00 GMT</pubDate></item><item><title>Introducing pyttpd</title><link>http://blog.sp.or.at/posts/200903introducing-pyttpd.html</link><description>&lt;p&gt;In this article I would like to inform you about my newest pet-project: &lt;a href="http://code.sp-its.at/projects/pyttpd" title="pyttpd project @ code.sp-its.at"&gt;pyttpd&lt;/a&gt;.&lt;br&gt;&lt;br&gt;pyttpd is my effort of implementing a webserver in Python, with a focus on security (through privilege separation), extensibility and scalability.&lt;br&gt;&lt;br&gt;I started this project because I was not entirely happy with the lack of flexibility and support for privilege separation by popular webservers. Whilst both &lt;a href="http://lighttpd.net" title="lighttpd.net"&gt;lighttpd&lt;/a&gt; and &lt;a href="http://httpd.apache.org" title="httpd.apache.org"&gt;Apache httpd&lt;/a&gt; provide means of running processes under different users these usually require hacks like &lt;a href="http://httpd.apache.org/docs/2.0/suexec.html" title="suexec (apache 2.0 documentation)"&gt;suexec&lt;/a&gt;. Additionally I am somehow curious about how a fully-fledged webserver implemented in Python would perform compared to the mentioned daemons.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Security through extensive use of Privilege Separation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Whilst it is common for daemons to initially run as a privileged user and drop privileges as soon as possible it is possible to make more extensive use of setuid and friends.&lt;br&gt;pyttpd's design aims at creating one &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#privileged-master-process-pmaster" title="pmaster (pyttpd documentation)"&gt;privileged process&lt;/a&gt;, which only binds to privileged ports and spawns subprocesses.&lt;br&gt;All subprocesses have specific tasks, such as routing &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#unprivileged-master-process-umaster" title="umaster (pyttpd documentation)"&gt;between all processes&lt;/a&gt;, &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#id1" title="listener process (pyttpd documentation)"&gt;protocol-specific parsing&lt;/a&gt; of incoming requests and handling &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts/process_layout.html#id2" title="vhost process (pyttpd documentation)"&gt;processing&lt;/a&gt; of those requests.&lt;br&gt;The point is that all these processes do not run as "&lt;em&gt;www-data&lt;/em&gt;" or another common account, but that a logic separation takes place on a per-host basis. This means that if the webserver is hosting &lt;em&gt;www.example.org&lt;/em&gt; and &lt;em&gt;webapp.example.org&lt;/em&gt; those will be running under different system accounts, making it hard to interfere with each other. This method should also enable the use of &lt;a href="http://en.wikipedia.org/wiki/Mandatory_access_control" title="Mandatory Access Control @ en.wikipedia.org"&gt;MAC&lt;/a&gt; mechanisms such as &lt;a href="http://en.wikipedia.org/wiki/SELinux" title="SELinux @ en.wikipedia.org"&gt;SELinux&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Simplified_Mandatory_Access_Control_Kernel" title="SMACK @ en.wikipedia.org"&gt;SMACK&lt;/a&gt; more efficiently.&lt;br&gt;&lt;br&gt;The design choice of having separate processes for each vhost comes with another benefit: users (or customers) "owning" a vhost could potentionally be allowed to modify parts of the vhost's configuration (excluding UID, GID, and other security-relevant options) on their own.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Early status&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Right now pyttpd is in a very early planning stage, with no code to show yet. I am still in the middle of the process of writing down all ideas that come to my mind, weeding some out and documenting the others.&lt;br&gt;So what do I have to show you then? Well, the the concept section of the &lt;a href="http://code.sp-its.at/doc/pyttpd/tip/concepts" title="Concepts (pyttpd documentation)"&gt;documentation&lt;/a&gt; is online now and I am planning on extending it in the next few days and eventually start writing code rather sooner than later.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Your ideas...&lt;/strong&gt;&lt;br&gt;&lt;br&gt;...and opinions are what I am really interested in. If you are interested in this project I would love if you got involved in some way. Feel free to create tickets at pyttpd's &lt;a href="http://code.sp-its.at/projects/pyttpd" title="pyttpd project @ code.sp-its.at"&gt;project page&lt;/a&gt; if you have an idea you feel is worth adding or if one of my ideas is flawed, create a comment here or send me an &lt;a href="mailto:stephan%20at%20peijnik%20dot%20at" title="send email to stephan at peijnik dot at"&gt;email&lt;/a&gt;.&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>pyttpd</category><category>free software</category><guid>http://blog.sp.or.at/posts/200903introducing-pyttpd.html</guid><pubDate>Mon, 30 Mar 2009 23:27:00 GMT</pubDate></item><item><title>How using proprietary software can affect system security</title><link>http://blog.sp.or.at/posts/200903how-using-proprietary-software-can.html</link><description>&lt;p&gt;There has been a lot of discussion on whether Free Software is more secure than proprietary software, but I have an additional argument that shows how the use of Free Software can improve system security.&lt;br&gt;&lt;br&gt;Now you probably expect me to come up with a pure technical reason showing superiority of Free Software, but I am taking another path this time: let's talk about user trust.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Software updates on pure Free Software operating systems&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Firstly, let's take a look at how security updates are deployed on pure Free Software operating systems.&lt;br&gt;All major GNU/Linux and *BSD distributions come with built-in update systems for all Free Software packages provided by the distribution. Once a security update to any piece of software is released you will get a notification saying updates are available and that you should install them and after doing so your system should be in a quite secure state.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Updater-applications of proprietary software&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Okay, proprietary software does often come with its own update mechanisms, giving you pretty much the same functionality. But here is my point: users tend to block these updater-applications from accessing the network with personal firewalls and similar tools, which basically disables the updater and most likely will cause the system to be more vulnerable rather sooner than later.&lt;br&gt;&lt;br&gt;&lt;strong&gt;But why do people even consider blocking an updater-application? &lt;/strong&gt;&lt;br&gt;&lt;br&gt;When I asked people why they blocked these applications a lot of reasons came up, but it usually boils down to lack of trust for proprietary software vendors. People seem not to trust software vendors for a variety of reasons. The most common reasons seem to be that they are either worried about the disclosure of private information or the lack of a license for a piece of software, combined with the first reason.&lt;br&gt;&lt;br&gt;So people actually seem to be scared by what a piece proprietary software could do, and when not having their software licensed people seem to be even more scared. When I ask people why they are running these programs, even though they do not trust their vendors they usually shrug and I get replies that can be summed up as "it just works", "but I don't have a choice" and "I am used to software X".&lt;br&gt;&lt;br&gt;&lt;strong&gt;The solution is Free Software&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Free Software can be a solution to all these problems. The most important thing people should be aware of that they do not have to fear Free Software vendors. After all, when using Free Software you do have a valid license and you can, at least in theory, check exactly a program is doing to your system. Also, if you are not capable of doing such checks yourself, you can rest assured that other people are doing such checks and give back to the project in question, improving your favorite Free Software applications.&lt;br&gt;&lt;br&gt;Free Software is a choice, and there is hardly any proprietary piece of software which cannot be replaced by a free equivalent. Free Software is my first choice, not only for me but for my family too, with great results so far.&lt;br&gt;&lt;br&gt;&lt;em&gt;Rest assured you can trust in what your software is doing, free yourself today&lt;/em&gt; - &lt;strong&gt;use Free Software&lt;/strong&gt;.&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>observations</category><category>free software</category><guid>http://blog.sp.or.at/posts/200903how-using-proprietary-software-can.html</guid><pubDate>Sun, 29 Mar 2009 10:17:00 GMT</pubDate></item></channel></rss>