<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (nwu)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Autoconf and Python: checking for modules</title><link>http://blog.sp.or.at/posts/200808autoconf-and-python-checking-for.html</link><description>&lt;p&gt;I am currently writing a Python application that makes use of GNU Autotools as build system and noticed that determining whether a specific Python module is installed is not that easy and no usable Autoconf macro exists. So I came up with &lt;a href="http://blog.peijnik.at/wp-content/uploads/2008/08/python_module.m4" title="python_module.m4"&gt;my own solution&lt;/a&gt;, which I would like to share with you.&lt;br&gt;&lt;br&gt;The &lt;em&gt;AC_CHECK_PYTHON_MODULE&lt;/em&gt; macro takes two arguments: The module name and optionally the variable name holding version information. This way it is not only possible to determine whether a module is installed (ie. loads in Python) on the current system, but also retrieve version information from that module.&lt;br&gt;&lt;br&gt;The following examples checks whether the Crypto module is installed and retrieves its version information from Crypto.__version__:&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;AC_CHECK_PYTHON_MODULE(Crypto, __version__)&lt;/blockquote&gt;&lt;br&gt;The macro itself does never report and error, but rather only a found/not found result. Error checking is up to the user and can be done via these two Autoconf variables:&lt;br&gt;&lt;ul&gt;&lt;br&gt;&lt;li&gt;PYTHON_&lt;em&gt;&amp;lt;MODULE_NAME&amp;gt;&lt;/em&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;PYTHON_&lt;em&gt;&amp;lt;MODULE_NAME&amp;gt;&lt;/em&gt;_VERSION&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;PYTHON_&lt;em&gt;&amp;lt;MODULE_NAME&amp;gt;&lt;/em&gt; is set to &lt;em&gt;"1"&lt;/em&gt; if the module is present and &lt;em&gt;"0"&lt;/em&gt; if not present.&lt;br&gt;PYTHON_&lt;em&gt;&amp;lt;MODULE_NAME&amp;gt;&lt;/em&gt;_VERSION is only set when the version variable argument has been set and contains the version information of the module, if the module been found. If the module is not present this variable is also set to &lt;em&gt;"0"&lt;/em&gt;.&lt;br&gt;&lt;br&gt;The version variable argument is optional as I wrote, so the following invocation works too and only checks whether the distutils module is present:&lt;br&gt;&lt;blockquote&gt;AC_CHECK_PYTHON_MODULE(distutils)&lt;/blockquote&gt;&lt;br&gt;As I wrote earlier in this article I would like to share this macro with you. You can download it &lt;a href="http://blog.peijnik.at/wp-content/uploads/2008/08/python_module.m4" title="python_module.m4"&gt;here&lt;/a&gt;.</description><category>foss</category><category>observations</category><category>nwu</category><category>free software</category><guid>http://blog.sp.or.at/posts/200808autoconf-and-python-checking-for.html</guid><pubDate>Sun, 31 Aug 2008 10:04:00 GMT</pubDate></item><item><title>nwu development news #0</title><link>http://blog.sp.or.at/posts/200801nwu-development-news-0.html</link><description>&lt;p&gt;So, today I am starting off with a new story series. The &lt;a href="http://cetico.org/nwu"&gt;nwu&lt;/a&gt; development news.&lt;br&gt;Now what is this series about? Well, to make a long story short, it is about what has recently changed in nwu's codebase and how nwu is coming along.&lt;br&gt;Just a sidenote, the first story in this series is of course number 0, as real programmers start counting at 0. :-)&lt;br&gt;&lt;br&gt;For those of you who are now wondering what nwu is or could be, I did write about nwu on this weblog already and the 'nwu - an introduction' post should give you a good idea of what it is.&lt;br&gt;&lt;br&gt;So, what has changed recently? Basically I merged my changes back into trunk, which means that most of these things are going to be used now. This means that the &lt;strong&gt;application framework&lt;/strong&gt;, the &lt;strong&gt;scheduler&lt;/strong&gt;, the &lt;strong&gt;APT "Packages" file parser&lt;/strong&gt;, &lt;strong&gt;support for gzip compression&lt;/strong&gt; in both the SecureXMLRPC client and server and the brand-new &lt;strong&gt;RPC framework&lt;/strong&gt; are either already being used, or are going to be used soon.&lt;br&gt;&lt;br&gt;Except for the RPC framework, which would need to be adapted, and the application framework, which depends on nwu.common.config, all these pieces of code also work stand-alone and can be used in other python applications too.&lt;/p&gt;</description><category>nwu</category><category>free software</category><guid>http://blog.sp.or.at/posts/200801nwu-development-news-0.html</guid><pubDate>Wed, 16 Jan 2008 20:49:00 GMT</pubDate></item><item><title>Using parts of nwu in your project</title><link>http://blog.sp.or.at/posts/200801using-parts-of-nwu-in-your-project.html</link><description>&lt;p&gt;As I promised I am writing about &lt;a href="http://cetico.org/nwu" title="network wide updates"&gt;nwu&lt;/a&gt; again. But instead of reporting on recent development efforts I would rather like to point something else out today: The &lt;a href="http://cetico.org/nwu/browser/branches/stephan/nwu/common" title="nwu.common module"&gt;nwu.common&lt;/a&gt; Python module contains code which can be used stand-alone in your applications. Some of the functions the module provides could come in handy, so I thought it was a good idea to let you know.&lt;br&gt;&lt;br&gt;This article is going to explain the stand-alone nwu.common.* modules and their function.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;strong&gt; nwu.common.SecureXMLRPC&lt;/strong&gt;&lt;br&gt;&lt;br&gt;I would like to start out introducing my "baby": SecureXMLRPC. As the name suggests it provides support for XML-RPC over https. You might think "but that's present in Python's SimpleXMLRPCServer and xmlrpclib already" and you are right about that. However, the Python implementation uses &lt;a href="http://openssl.org/" title="OpenSSL homepage"&gt;OpenSSL&lt;/a&gt;, whilst SecureXMLRPC provides both a server and client implementation using &lt;a href="http://www.gnu.org/software/gnutls/" title="GnuTLS homepage"&gt;GnuTLS&lt;/a&gt;. Even though the OpenSSL version works perfectly fine you cannot link it to GPL-licensed code due to the OpenSSL license being &lt;a href="http://gnu.org/licenses/license-list.html" title="license list"&gt;incompatible to the GPL&lt;/a&gt;.&lt;br&gt;Furthermore SecureXMLRPC supports compression of the XML-RPC payload and as of today is aware of multi-threading.&lt;br&gt;&lt;br&gt;&lt;strong&gt;nwu.common.config&lt;/strong&gt;&lt;br&gt;&lt;br&gt;The config module provides a single class, "Config". It basically is a slightly improved version of Python's SafeConfigParser class and allows passing a "default value" argument to its get() method which is returned in case the setting is not present in the config.&lt;br&gt;&lt;br&gt;&lt;strong&gt;nwu.common.app&lt;/strong&gt;&lt;br&gt;&lt;br&gt;This is a simple application framework. It makes use of "nwu.common.config" for reading the config file. However, its main feature is a simple-to-use command-line parser, which parses not only arguments from the command-line (such as --do-something, -d or --configfile=filename), but also supports "commands" as they can be found in several applications, such as aptitude. This way it is easy to not only create top-level commands (like "aptitude &lt;em&gt;search&lt;/em&gt; &amp;lt;package name&amp;gt;"), but also nested command structures (like "program &lt;em&gt;computer get&lt;/em&gt; &amp;lt;computer name&amp;gt;", "program &lt;em&gt;computer list&lt;/em&gt;", etc.).&lt;br&gt;&lt;br&gt;&lt;strong&gt;nwu.common.certtool&lt;/strong&gt;&lt;br&gt;&lt;br&gt;The certtool module is a wrapper around GnuTLS' certtool application. It allows you to create private keys, certificate authorities, sign certificates, created certificate-signing-requests (CSRs)Â  and sign such.&lt;br&gt;However, please note that it currently does not implement the full functionality certtool provides but rather only the pieces nwu needs.&lt;br&gt;&lt;br&gt;&lt;strong&gt;nwu.common.aptmethod&lt;/strong&gt;&lt;br&gt;&lt;br&gt;nwu.common.aptmethod simplifies implementation of an APT transport/method in Python. It takes care of all communication done with apt itself and thus gives you the opportunity to implement a new method in a simple way.&lt;br&gt;&lt;br&gt;&lt;strong&gt;nwu.common.apt&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Finally there is also the apt module. This module currently contains code to parse APT Packages files.&lt;br&gt;&lt;br&gt;&lt;strong&gt;nwu.common.scheduler&lt;/strong&gt;&lt;br&gt;&lt;br&gt;One of the latest additions to the common module. It provides a way of scheduling tasks for execution at a certain date/time and executing a task in a given interval.&lt;/p&gt;</description><category>nwu</category><category>free software</category><guid>http://blog.sp.or.at/posts/200801using-parts-of-nwu-in-your-project.html</guid><pubDate>Sun, 13 Jan 2008 16:43:00 GMT</pubDate></item><item><title>nwu - an introduction</title><link>http://blog.sp.or.at/posts/200801nwu-introduction.html</link><description>&lt;p&gt;This article should give you a brief overview of what &lt;a href="http://cetico.org/nwu" target="_blank"&gt;network-wide updates&lt;/a&gt;, one of my projects, is about.&lt;br&gt;&lt;br&gt;Network wide updates, or nwu, is a &lt;a href="http://www.gnu.org/philosophy/free-sw.html"&gt;free software&lt;/a&gt; package licensed under the &lt;a href="http://gnu.org/licenses/gpl.html" target="_blank"&gt;GPL&lt;/a&gt; (version 3 or later). It allows an administrator to remotely install software on and roll out security upgrades to managed computers. It is targeted at GNU/Linux systems using the &lt;a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;Advanced Packaging Tool&lt;/a&gt; (APT) for package management and thus should run fine on all GNU/Linux distributions based on &lt;a href="http://debian.org"&gt;Debian GNU/Linux&lt;/a&gt; (such as &lt;a href="http://gnewsense.org"&gt;gNewSense&lt;/a&gt; and all &lt;a href="http://ubuntu.com"&gt;Ubuntu&lt;/a&gt; flavors).&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;It further gathers data about all managed computers in a database, which gives the administrator an overview about which systems are managed, the hardware configurations they have, the software installed on them and pending security updates.&lt;br&gt;&lt;br&gt;The system is split into two major components: the server, which is the central management point, and the clients, usually referred to as agents, which report to the server.&lt;br&gt;&lt;br&gt;Now let's go into nasty technical details. nwu is implemented in &lt;a href="http://python.org"&gt;Python&lt;/a&gt;, using XML-RPC and python-gnutls (and this way the &lt;a href="http://gnu.org/software/gnutls"&gt;GnuTLS&lt;/a&gt; library) for secure communication between the server and its agents. It further makes use of X.509-certificate authentication and provides an integrated CA-system which simplifies use of this method a great deal.&lt;br&gt;&lt;br&gt;Currently nwu is in an alpha development stage, but moving forward quite fast. We are expecting to be able to release a stable version quite soon.&lt;br&gt;&lt;br&gt;The development team is made up of &lt;a class="ext-link" href="http://cetico.org/tech"&gt;&lt;span class="icon"&gt;Yves Junqueira&lt;/span&gt;&lt;/a&gt; and myself right now, but we would be happy to accept contributions from others.&lt;br&gt;&lt;br&gt;If you are interested in nwu development you should probably watch this blog, as I am going to write about recent developments here.&lt;/p&gt;</description><category>nwu</category><category>free software</category><guid>http://blog.sp.or.at/posts/200801nwu-introduction.html</guid><pubDate>Sun, 13 Jan 2008 09:57:00 GMT</pubDate></item></channel></rss>