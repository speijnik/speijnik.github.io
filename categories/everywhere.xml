<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Stephan's blog (everywhere)</title><link>http://blog.sp.or.at</link><description>Stephan's notes on technology</description><lastBuildDate>Wed, 22 May 2013 18:25:16 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python everywhere: computer games</title><link>http://blog.sp.or.at/posts/200904python-everywhere-computer-games.html</link><description>&lt;p&gt;This is the second article in my series Python everywhere and covers the use of Python for in computer games. The first article of this series covered the use of Python for the conficker worm scanner tool and can be found &lt;a href="http://blog.peijnik.at/2009/03/31/python-everywhere-conficker-scanner/" title="Python everywhere: conficker scanner"&gt;here&lt;/a&gt;.&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;strong&gt;Games written in Python&lt;/strong&gt;&lt;br&gt;&lt;br&gt;As &lt;a href="http://www.pygame.org/" title="pygame.org"&gt;PyGame&lt;/a&gt; provides a nice library for writing games purely in Python it is becoming more common to use Python for this task too. The book "&lt;a href="http://www.apress.com/book/view/9781590598726" title="Beginning Game Development with Python and Pygame  @ apress.com"&gt;Beginning Game Development with Python and Pygame&lt;/a&gt;" is linked directly from the PyGame homepage, and thus is probably a good resource if you want to start writing games in Python.&lt;br&gt;&lt;br&gt;However, I do not want to go into detail on how this library works, but rather provide you with a few examples of games written in Python. To provide you with a few examples I had a look at the &lt;a href="http://www.pyweek.org/" title="pyweek.org"&gt;PyWeek&lt;/a&gt; homepage. PyWeek is a Python Game Programming Challenge which invites everyone to participate, so the winners of this contest are of high-quality, and I'm showing you the latest two winners.&lt;br&gt;&lt;br&gt;There are always two winners of PyWeek in for indivduals who have created games and teams. The latest winners are "&lt;a href="http://www.pyweek.org/e/Rambo/" title="Team Rambo @ pyweek.org"&gt;Team Rambo&lt;/a&gt;" in the individual effort category and "&lt;a href="http://www.pyweek.org/e/midnightsun/" title="Midnight Sun @ pyweek.org"&gt;Midnight Sun&lt;/a&gt;" with their two-man team.&lt;br&gt;&lt;br&gt;&lt;strong&gt;PyWeek: Team Rambo's Stringrolled (individual)&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p style="text-align: left;"&gt;Stringrolled makes use of the pygame library I mentioned earlier and is a &lt;a href="http://en.wikipedia.org/wiki/Platform_game" title="Platform game @ en.wikipedia.org"&gt;platform game&lt;/a&gt;. In a mere 2377 lines of code, including comments and blank lines, Team Rambo created an impressive game, coming with a story, easy-to-learn controls and nice 2D-graphics, screenshot below. &lt;a href="http://media.pyweek.org/dl/7/Rambo/pyweek3.png"&gt;&lt;img alt="Stringrolled screenshot @ media.pyweek.org" class="aligncenter" height="240" src="http://media.pyweek.org/dl/7/Rambo/pyweek3.png" title="Screenshot of Stringrolled" width="384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;strong&gt;PyWeek: Midnight Sun's Kite Story&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;Kite Story is yet another interesting game, with game mechanics I have not seen ever before. You are controlling a kite with your mouse and are trying to catch objects, such as bees and birds, with the kite's rope. So what you basically do you draw a loop around an object with&lt;a href="http://media.pyweek.org/dl/7/midnightsun/ss2.png"&gt;&lt;img alt="Kite Story screenshot @ media.pyweek.org" class="alignleft" height="359" src="http://media.pyweek.org/dl/7/midnightsun/ss2.png" title="Kite Story: catching a sky diver" width="357"&gt;&lt;/a&gt; your mouse and that way catch it. Every third cought object you advance to the next level, but keep in mind not to collide with the objects, because you will lose them and in turn be doing the previous level again, screenshot below. It should be noted that this game does not make use of PyGame at all, but rather relies on &lt;a href="http://pyglet.org/" title="pyglet.org"&gt;pyglet&lt;/a&gt;, and is 1997 lines of code in length, again counting blank lines and comments too.&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;/p&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;&lt;strong&gt;Games using Python&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;You have seen now that it is possible to write a game completely in Python, but there's another use-case of Python in games: scripting.&lt;br&gt;Some (proprietary) games, such as &lt;a href="http://www.2kgames.com/civ4/blog_03.htm" title="Modding Sid Meier's Civilization IV @ 2kgames.com"&gt;Civilization IV&lt;/a&gt;, offer Python support in their editors and SDKs. This quote from the article at 2kgames.com should give you a good idea of what can be done using Python in Civilization IV:&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p style="text-align: left;"&gt;The next level offers &lt;strong&gt;Python and XML&lt;/strong&gt; support, letting modders with more experience manipulate the game world and everything in it. XML (eXtensible Markup Language) files can be edited in standard text editors or in special XML file editors that have ease-of-use features like a grid view. Editing these files will allow players to tweak simple game rules and change or add content. For instance, they can add new unit or building types, change the cost of wonders, or add new civilizations. Players can also change the sounds played at certain times or edit the play list for your soundtrack. NOTE: You can have custom soundtracks simply by adding music to the custom folder. You only need to edit the XML in order to assign certain pieces to specific eras or remove certain pieces.&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;The Python scripting language is fully integrated throughout the game and offers experienced modders a chance to really strut their stuff! People with some programming skills will be able to do things to alter the game in interesting and extraordinary ways. For instance, all of the game interface screens are exposed to Python, so modders will be able to change the information that's displayed, as well as how it's positioned on the screen. We also use Python to create and generate all of the random map scripts that are included in the game. So, players will now have the ability to add scripted events to the game like automatically generating units when a tile is reached, having specific situations trigger automatic war, or get this, bringing back Civil Wars caused by unrest, Civ II style!&lt;/blockquote&gt;&lt;br&gt;&lt;a href="http://www.eveonline.com/" title="EVE Online Homepage"&gt;EVE Online&lt;/a&gt; is another game making use of Python, as an &lt;a href="http://www.eveonline.com/devblog.asp?a=blog&amp;amp;bid=488" title="stackless python 2.5 @ eveonline.com"&gt;article&lt;/a&gt; over at eveonline.com points out.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Python everywhere - also in compuater games&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Even though I am sure you can come up with a lot more examples of Python being used in computer games I think I have proven my point. Python is being used not only to create computer games, but sometimes also to provide developers with a way of extending games. To me personally it feels as if adoption of Python for this very task is increasing too, and I expect Python to be used even more by the game development community in the future.&lt;br&gt;&lt;br&gt;You can expect the third part of this series to be released in about a week, so please check back regularly if you like the series.</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200904python-everywhere-computer-games.html</guid><pubDate>Thu, 02 Apr 2009 16:35:00 GMT</pubDate></item><item><title>Python everywhere: extending applications with Python</title><link>http://blog.sp.or.at/posts/200903python-everywhere-extending.html</link><description>&lt;p&gt;Extending applications with Python: gimp, Evolution, Inkscape, Paint Shop Pro, [...]&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200903python-everywhere-extending.html</guid><pubDate>Tue, 31 Mar 2009 13:33:00 GMT</pubDate></item><item><title>Python everywhere: A Python Operating System called cleese</title><link>http://blog.sp.or.at/posts/200903python-everywhere-python-operating.html</link><description>&lt;p&gt;Cleese....&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200903python-everywhere-python-operating.html</guid><pubDate>Tue, 31 Mar 2009 13:31:00 GMT</pubDate></item><item><title>Python everywhere: conficker scanner</title><link>http://blog.sp.or.at/posts/200903python-everywhere-conficker-scanner.html</link><description>&lt;p&gt;This article is the first in my new series "Python everywhere".&lt;br&gt;&lt;br&gt;As this is the first article in this series I would like to explain what the series is all about.&lt;br&gt;As an avid Python user and developer I want to share my observations whenever I find Python applications doing not-so-unusual things, Python applications running on embedded devices. In the end I want to point out just what the name of this series suggests: Python is everywhere and can be used for everything.&lt;br&gt;&lt;br&gt;So, straight ahead to the first issue: the conficker scanner.&lt;br&gt;&lt;br&gt;&lt;a name="more"&gt;&lt;/a&gt;When reading an article about a detection mechanism for the conficker worm on &lt;a href="http://www.heise.de/security/Deutsche-Forscher-entwickeln-Netzwerk-Scan-fuer-Conficker-Wurm--/news/meldung/135434" title="Deutsche Forscher entwickeln Netzwerk-Scan für Conficker-Wurm @ heise.de"&gt;heise Security&lt;/a&gt; [german] I was myself wondering a few things, but wanted to give it a try. So I followed the link to the article &lt;a href="http://honeynet.org/node/388" title="Detecting Conficker @ honeynet.org"&gt;Detecting Conficker&lt;/a&gt;, by &lt;a href="http://honeynet.org/blog/9" title="Werner Tillmann\s blog @ honeynet.org"&gt;Tillmann Werner&lt;/a&gt;. Before clicking the link I was wondering whether I could get this tool running on GNU/Linux using wine, or another method.&lt;br&gt;&lt;br&gt;After downloading the ZIP file and unpacking it I thought I was dreaming. There were two Python files, along with a &lt;em&gt;COPYING&lt;/em&gt; file.&lt;br&gt;So, even though before having a look at the code I wanted to know the COPYING conditions, and again I saw something unexpected: it's licensed under the &lt;strong&gt;GPLv3&lt;/strong&gt;, great!&lt;br&gt;&lt;br&gt;As there are some computers running a proprietary operating system from Redmond on this network I immediately gave it a shot. I started the script (&lt;em&gt;scs.py&lt;/em&gt;), and after fulfilling its requirements (namely the &lt;em&gt;impacket&lt;/em&gt; Python module) I ran it on the local network and it worked without any problems. No conficker found on this network, after all my flatmates have their systems secured - good.&lt;br&gt;&lt;br&gt;So there you have another use-case for Python: detecting malware over the network.&lt;br&gt;Kudos should go to Tillmann Werner, not only for this piece of Python code, but also for his work on the &lt;a href="http://honeynet.org/" title="honeynet project (honeynet.org)"&gt;honeynet project&lt;/a&gt; and, together with Felix Leder, the great &lt;a href="https://www.honeynet.org/papers/conficker" title="Know Your Enemy: Containing Conficker paper @ honeynet.org"&gt;analysis&lt;/a&gt; of conficker. Keep up the good work, and thanks for proving Python can also be used for this task.&lt;/p&gt;</description><category>foss</category><category>Technology</category><category>everywhere</category><guid>http://blog.sp.or.at/posts/200903python-everywhere-conficker-scanner.html</guid><pubDate>Tue, 31 Mar 2009 11:30:00 GMT</pubDate></item></channel></rss>